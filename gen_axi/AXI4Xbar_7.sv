// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module AXI4Xbar_7(
  input         clock,
  input         reset,
  input         auto_in_1_aw_valid,
  input  [31:0] auto_in_1_aw_bits_addr,
  input         auto_in_1_w_valid,
  input  [31:0] auto_in_1_w_bits_data,
  output        auto_in_1_b_valid,
  input         auto_in_0_aw_valid,
  input  [31:0] auto_in_0_aw_bits_addr,
  input         auto_in_0_w_valid,
  input  [31:0] auto_in_0_w_bits_data,
  output        auto_in_0_b_valid,
  output        auto_out_aw_valid,
  output [4:0]  auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [2:0]  auto_out_aw_bits_size,
  output        auto_out_w_valid,
  output [31:0] auto_out_w_bits_data,
  output [3:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
  output        auto_out_b_ready,
  input         auto_out_b_valid,
  input  [4:0]  auto_out_b_bits_id,
  input         auto_out_r_valid,
  input  [4:0]  auto_out_r_bits_id
);

  wire       _out_0_w_valid_T_4;
  wire       out_0_aw_valid;
  wire       _awOut_0_io_enq_ready;
  wire       _awOut_0_io_deq_valid;
  wire [1:0] _awOut_0_io_deq_bits;
  reg        latched;
  wire       _awOut_0_io_enq_valid_T_1 = out_0_aw_valid & ~latched;
  reg        awOut_0_io_enq_bits_idle;
  wire       awOut_0_io_enq_bits_anyValid = auto_in_0_aw_valid | auto_in_1_aw_valid;
  wire [1:0] awOut_0_io_enq_bits_readys_valid = {auto_in_1_aw_valid, auto_in_0_aw_valid};
  reg  [1:0] awOut_0_io_enq_bits_readys_mask;
  wire [1:0] _awOut_0_io_enq_bits_readys_filter_T_1 =
    awOut_0_io_enq_bits_readys_valid & ~awOut_0_io_enq_bits_readys_mask;
  wire [1:0] awOut_0_io_enq_bits_readys_readys =
    ~({awOut_0_io_enq_bits_readys_mask[1],
       _awOut_0_io_enq_bits_readys_filter_T_1[1] | awOut_0_io_enq_bits_readys_mask[0]}
      & ({_awOut_0_io_enq_bits_readys_filter_T_1[0], auto_in_1_aw_valid}
         | _awOut_0_io_enq_bits_readys_filter_T_1));
  wire       awOut_0_io_enq_bits_winner_0 =
    awOut_0_io_enq_bits_readys_readys[0] & auto_in_0_aw_valid;
  wire       awOut_0_io_enq_bits_winner_1 =
    awOut_0_io_enq_bits_readys_readys[1] & auto_in_1_aw_valid;
  reg        awOut_0_io_enq_bits_state_0;
  reg        awOut_0_io_enq_bits_state_1;
  wire       awOut_0_io_enq_bits_muxState_0 =
    awOut_0_io_enq_bits_idle ? awOut_0_io_enq_bits_winner_0 : awOut_0_io_enq_bits_state_0;
  wire       awOut_0_io_enq_bits_muxState_1 =
    awOut_0_io_enq_bits_idle ? awOut_0_io_enq_bits_winner_1 : awOut_0_io_enq_bits_state_1;
  assign out_0_aw_valid =
    awOut_0_io_enq_bits_idle
      ? awOut_0_io_enq_bits_anyValid
      : awOut_0_io_enq_bits_state_0 & auto_in_0_aw_valid | awOut_0_io_enq_bits_state_1
        & auto_in_1_aw_valid;
  assign _out_0_w_valid_T_4 =
    _awOut_0_io_deq_bits[0] & auto_in_0_w_valid | _awOut_0_io_deq_bits[1]
    & auto_in_1_w_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~awOut_0_io_enq_bits_winner_0 | ~awOut_0_io_enq_bits_winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:275 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~awOut_0_io_enq_bits_anyValid | awOut_0_io_enq_bits_winner_0
              | awOut_0_io_enq_bits_winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire [1:0] _awOut_0_io_enq_bits_readys_mask_T =
    awOut_0_io_enq_bits_readys_readys & awOut_0_io_enq_bits_readys_valid;
  always @(posedge clock) begin
    if (reset) begin
      latched <= 1'h0;
      awOut_0_io_enq_bits_idle <= 1'h1;
      awOut_0_io_enq_bits_readys_mask <= 2'h3;
      awOut_0_io_enq_bits_state_0 <= 1'h0;
      awOut_0_io_enq_bits_state_1 <= 1'h0;
    end
    else begin
      latched <= _awOut_0_io_enq_ready & _awOut_0_io_enq_valid_T_1 | latched;
      awOut_0_io_enq_bits_idle <=
        ~awOut_0_io_enq_bits_anyValid & awOut_0_io_enq_bits_idle;
      if (awOut_0_io_enq_bits_idle & (|awOut_0_io_enq_bits_readys_valid))
        awOut_0_io_enq_bits_readys_mask <=
          _awOut_0_io_enq_bits_readys_mask_T
          | {_awOut_0_io_enq_bits_readys_mask_T[0], 1'h0};
      if (awOut_0_io_enq_bits_idle) begin
        awOut_0_io_enq_bits_state_0 <= awOut_0_io_enq_bits_winner_0;
        awOut_0_io_enq_bits_state_1 <= awOut_0_io_enq_bits_winner_1;
      end
    end
  end // always @(posedge)
  Queue2_UInt2 awOut_0 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awOut_0_io_enq_ready),
    .io_enq_valid (_awOut_0_io_enq_valid_T_1),
    .io_enq_bits  ({awOut_0_io_enq_bits_muxState_1, awOut_0_io_enq_bits_muxState_0}),
    .io_deq_ready (1'h0),
    .io_deq_valid (_awOut_0_io_deq_valid),
    .io_deq_bits  (_awOut_0_io_deq_bits)
  );
  assign auto_in_1_b_valid = auto_out_b_valid & ~(auto_out_b_bits_id[4]);
  assign auto_in_0_b_valid = auto_out_b_valid & auto_out_b_bits_id[4];
  assign auto_out_aw_valid = out_0_aw_valid & (latched | _awOut_0_io_enq_ready);
  assign auto_out_aw_bits_id = {awOut_0_io_enq_bits_muxState_0, 4'h0};
  assign auto_out_aw_bits_addr =
    (awOut_0_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_addr : 32'h0)
    | (awOut_0_io_enq_bits_muxState_1 ? auto_in_1_aw_bits_addr : 32'h0);
  assign auto_out_aw_bits_size =
    {1'h0, awOut_0_io_enq_bits_muxState_0 | awOut_0_io_enq_bits_muxState_1, 1'h0};
  assign auto_out_w_valid = _out_0_w_valid_T_4 & _awOut_0_io_deq_valid;
  assign auto_out_w_bits_data =
    (_awOut_0_io_deq_bits[0] ? auto_in_0_w_bits_data : 32'h0)
    | (_awOut_0_io_deq_bits[1] ? auto_in_1_w_bits_data : 32'h0);
  assign auto_out_w_bits_strb =
    {4{_awOut_0_io_deq_bits[0]}} | {4{_awOut_0_io_deq_bits[1]}};
  assign auto_out_w_bits_last = |_awOut_0_io_deq_bits;
  assign auto_out_b_ready = 1'h1;
endmodule

