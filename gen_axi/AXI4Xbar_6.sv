// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module AXI4Xbar_6(
  input         clock,
  input         reset,
  output        auto_in_aw_ready,
  input         auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [28:0] auto_in_aw_bits_addr,
  output        auto_in_w_ready,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
  input         auto_in_b_ready,
  output        auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output        auto_in_ar_ready,
  input         auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [28:0] auto_in_ar_bits_addr,
  input  [2:0]  auto_in_ar_bits_size,
  input         auto_in_r_ready,
  output        auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output        auto_in_r_bits_last,
  input         auto_out_1_aw_ready,
  output        auto_out_1_aw_valid,
  output [3:0]  auto_out_1_aw_bits_id,
  output [28:0] auto_out_1_aw_bits_addr,
  input         auto_out_1_w_ready,
  output        auto_out_1_w_valid,
  output [63:0] auto_out_1_w_bits_data,
  output [7:0]  auto_out_1_w_bits_strb,
  output        auto_out_1_b_ready,
  input         auto_out_1_b_valid,
  input  [3:0]  auto_out_1_b_bits_id,
  input         auto_out_1_ar_ready,
  output        auto_out_1_ar_valid,
  output [3:0]  auto_out_1_ar_bits_id,
  output [28:0] auto_out_1_ar_bits_addr,
  output [2:0]  auto_out_1_ar_bits_size,
  output        auto_out_1_r_ready,
  input         auto_out_1_r_valid,
  input  [3:0]  auto_out_1_r_bits_id,
  input  [63:0] auto_out_1_r_bits_data,
  input         auto_out_0_aw_ready,
  output        auto_out_0_aw_valid,
  output [3:0]  auto_out_0_aw_bits_id,
  output [28:0] auto_out_0_aw_bits_addr,
  input         auto_out_0_w_ready,
  output        auto_out_0_w_valid,
  output [63:0] auto_out_0_w_bits_data,
  output [7:0]  auto_out_0_w_bits_strb,
  output        auto_out_0_b_ready,
  input         auto_out_0_b_valid,
  input  [3:0]  auto_out_0_b_bits_id,
  input         auto_out_0_ar_ready,
  output        auto_out_0_ar_valid,
  output [3:0]  auto_out_0_ar_bits_id,
  output [28:0] auto_out_0_ar_bits_addr,
  output [2:0]  auto_out_0_ar_bits_size,
  output        auto_out_0_r_ready,
  input         auto_out_0_r_valid,
  input  [3:0]  auto_out_0_r_bits_id,
  input  [63:0] auto_out_0_r_bits_data
);

  wire [3:0]  _in_0_b_bits_T_5;
  wire        in_0_b_valid;
  wire [3:0]  _in_0_r_bits_T_11;
  wire        _in_0_r_bits_T_2;
  wire        in_0_r_valid;
  wire        _portsWOI_in_0_w_ready_T_2;
  wire        _portsAWOI_in_0_aw_ready_T_2;
  wire        _portsAROI_in_0_ar_ready_T_2;
  wire        nodeIn_aw_ready;
  wire        nodeIn_ar_ready;
  wire        _awIn_0_io_enq_ready;
  wire        _awIn_0_io_deq_valid;
  wire [1:0]  _awIn_0_io_deq_bits;
  wire        _arFIFOMap_15_T_1 = nodeIn_ar_ready & auto_in_ar_valid;
  wire        _arFIFOMap_0_T_2 = auto_in_ar_bits_id == 4'h0 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_15_T_4 = auto_in_r_ready & in_0_r_valid;
  wire        _arFIFOMap_0_T_6 =
    _in_0_r_bits_T_11 == 4'h0 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_0_count;
  reg         arFIFOMap_0_last;
  wire        _arFIFOMap_0_T_22 = arFIFOMap_0_count != 3'h7;
  wire        _awFIFOMap_15_T_1 = nodeIn_aw_ready & auto_in_aw_valid;
  wire        _awFIFOMap_0_T_2 = auto_in_aw_bits_id == 4'h0 & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_15_T_4 = auto_in_b_ready & in_0_b_valid;
  wire        _awFIFOMap_0_T_5 = _in_0_b_bits_T_5 == 4'h0 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_0_count;
  reg         awFIFOMap_0_last;
  wire        _awFIFOMap_0_T_21 = awFIFOMap_0_count != 3'h7;
  wire        _arFIFOMap_1_T_2 = auto_in_ar_bits_id == 4'h1 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_1_T_6 =
    _in_0_r_bits_T_11 == 4'h1 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_1_count;
  reg         arFIFOMap_1_last;
  wire        _arFIFOMap_1_T_22 = arFIFOMap_1_count != 3'h7;
  wire        _awFIFOMap_1_T_2 = auto_in_aw_bits_id == 4'h1 & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_1_T_5 = _in_0_b_bits_T_5 == 4'h1 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_1_count;
  reg         awFIFOMap_1_last;
  wire        _awFIFOMap_1_T_21 = awFIFOMap_1_count != 3'h7;
  wire        _arFIFOMap_2_T_2 = auto_in_ar_bits_id == 4'h2 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_2_T_6 =
    _in_0_r_bits_T_11 == 4'h2 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_2_count;
  reg         arFIFOMap_2_last;
  wire        _arFIFOMap_2_T_22 = arFIFOMap_2_count != 3'h7;
  wire        _awFIFOMap_2_T_2 = auto_in_aw_bits_id == 4'h2 & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_2_T_5 = _in_0_b_bits_T_5 == 4'h2 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_2_count;
  reg         awFIFOMap_2_last;
  wire        _awFIFOMap_2_T_21 = awFIFOMap_2_count != 3'h7;
  wire        _arFIFOMap_3_T_2 = auto_in_ar_bits_id == 4'h3 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_3_T_6 =
    _in_0_r_bits_T_11 == 4'h3 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_3_count;
  reg         arFIFOMap_3_last;
  wire        _arFIFOMap_3_T_22 = arFIFOMap_3_count != 3'h7;
  wire        _awFIFOMap_3_T_2 = auto_in_aw_bits_id == 4'h3 & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_3_T_5 = _in_0_b_bits_T_5 == 4'h3 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_3_count;
  reg         awFIFOMap_3_last;
  wire        _awFIFOMap_3_T_21 = awFIFOMap_3_count != 3'h7;
  wire        _arFIFOMap_4_T_2 = auto_in_ar_bits_id == 4'h4 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_4_T_6 =
    _in_0_r_bits_T_11 == 4'h4 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_4_count;
  reg         arFIFOMap_4_last;
  wire        _arFIFOMap_4_T_22 = arFIFOMap_4_count != 3'h7;
  wire        _awFIFOMap_4_T_2 = auto_in_aw_bits_id == 4'h4 & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_4_T_5 = _in_0_b_bits_T_5 == 4'h4 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_4_count;
  reg         awFIFOMap_4_last;
  wire        _awFIFOMap_4_T_21 = awFIFOMap_4_count != 3'h7;
  wire        _arFIFOMap_5_T_2 = auto_in_ar_bits_id == 4'h5 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_5_T_6 =
    _in_0_r_bits_T_11 == 4'h5 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_5_count;
  reg         arFIFOMap_5_last;
  wire        _arFIFOMap_5_T_22 = arFIFOMap_5_count != 3'h7;
  wire        _awFIFOMap_5_T_2 = auto_in_aw_bits_id == 4'h5 & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_5_T_5 = _in_0_b_bits_T_5 == 4'h5 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_5_count;
  reg         awFIFOMap_5_last;
  wire        _awFIFOMap_5_T_21 = awFIFOMap_5_count != 3'h7;
  wire        _arFIFOMap_6_T_2 = auto_in_ar_bits_id == 4'h6 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_6_T_6 =
    _in_0_r_bits_T_11 == 4'h6 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_6_count;
  reg         arFIFOMap_6_last;
  wire        _arFIFOMap_6_T_22 = arFIFOMap_6_count != 3'h7;
  wire        _awFIFOMap_6_T_2 = auto_in_aw_bits_id == 4'h6 & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_6_T_5 = _in_0_b_bits_T_5 == 4'h6 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_6_count;
  reg         awFIFOMap_6_last;
  wire        _awFIFOMap_6_T_21 = awFIFOMap_6_count != 3'h7;
  wire        _arFIFOMap_7_T_2 = auto_in_ar_bits_id == 4'h7 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_7_T_6 =
    _in_0_r_bits_T_11 == 4'h7 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_7_count;
  reg         arFIFOMap_7_last;
  wire        _arFIFOMap_7_T_22 = arFIFOMap_7_count != 3'h7;
  wire        _awFIFOMap_7_T_2 = auto_in_aw_bits_id == 4'h7 & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_7_T_5 = _in_0_b_bits_T_5 == 4'h7 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_7_count;
  reg         awFIFOMap_7_last;
  wire        _awFIFOMap_7_T_21 = awFIFOMap_7_count != 3'h7;
  wire        _arFIFOMap_8_T_2 = auto_in_ar_bits_id == 4'h8 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_8_T_6 =
    _in_0_r_bits_T_11 == 4'h8 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_8_count;
  reg         arFIFOMap_8_last;
  wire        _arFIFOMap_8_T_22 = arFIFOMap_8_count != 3'h7;
  wire        _awFIFOMap_8_T_2 = auto_in_aw_bits_id == 4'h8 & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_8_T_5 = _in_0_b_bits_T_5 == 4'h8 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_8_count;
  reg         awFIFOMap_8_last;
  wire        _awFIFOMap_8_T_21 = awFIFOMap_8_count != 3'h7;
  wire        _arFIFOMap_9_T_2 = auto_in_ar_bits_id == 4'h9 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_9_T_6 =
    _in_0_r_bits_T_11 == 4'h9 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_9_count;
  reg         arFIFOMap_9_last;
  wire        _arFIFOMap_9_T_22 = arFIFOMap_9_count != 3'h7;
  wire        _awFIFOMap_9_T_2 = auto_in_aw_bits_id == 4'h9 & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_9_T_5 = _in_0_b_bits_T_5 == 4'h9 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_9_count;
  reg         awFIFOMap_9_last;
  wire        _awFIFOMap_9_T_21 = awFIFOMap_9_count != 3'h7;
  wire        _arFIFOMap_10_T_2 = auto_in_ar_bits_id == 4'hA & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_10_T_6 =
    _in_0_r_bits_T_11 == 4'hA & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_10_count;
  reg         arFIFOMap_10_last;
  wire        _arFIFOMap_10_T_22 = arFIFOMap_10_count != 3'h7;
  wire        _awFIFOMap_10_T_2 = auto_in_aw_bits_id == 4'hA & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_10_T_5 = _in_0_b_bits_T_5 == 4'hA & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_10_count;
  reg         awFIFOMap_10_last;
  wire        _awFIFOMap_10_T_21 = awFIFOMap_10_count != 3'h7;
  wire        _arFIFOMap_11_T_2 = auto_in_ar_bits_id == 4'hB & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_11_T_6 =
    _in_0_r_bits_T_11 == 4'hB & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_11_count;
  reg         arFIFOMap_11_last;
  wire        _arFIFOMap_11_T_22 = arFIFOMap_11_count != 3'h7;
  wire        _awFIFOMap_11_T_2 = auto_in_aw_bits_id == 4'hB & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_11_T_5 = _in_0_b_bits_T_5 == 4'hB & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_11_count;
  reg         awFIFOMap_11_last;
  wire        _awFIFOMap_11_T_21 = awFIFOMap_11_count != 3'h7;
  wire        _arFIFOMap_12_T_2 = auto_in_ar_bits_id == 4'hC & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_12_T_6 =
    _in_0_r_bits_T_11 == 4'hC & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_12_count;
  reg         arFIFOMap_12_last;
  wire        _arFIFOMap_12_T_22 = arFIFOMap_12_count != 3'h7;
  wire        _awFIFOMap_12_T_2 = auto_in_aw_bits_id == 4'hC & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_12_T_5 = _in_0_b_bits_T_5 == 4'hC & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_12_count;
  reg         awFIFOMap_12_last;
  wire        _awFIFOMap_12_T_21 = awFIFOMap_12_count != 3'h7;
  wire        _arFIFOMap_13_T_2 = auto_in_ar_bits_id == 4'hD & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_13_T_6 =
    _in_0_r_bits_T_11 == 4'hD & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_13_count;
  reg         arFIFOMap_13_last;
  wire        _arFIFOMap_13_T_22 = arFIFOMap_13_count != 3'h7;
  wire        _awFIFOMap_13_T_2 = auto_in_aw_bits_id == 4'hD & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_13_T_5 = _in_0_b_bits_T_5 == 4'hD & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_13_count;
  reg         awFIFOMap_13_last;
  wire        _awFIFOMap_13_T_21 = awFIFOMap_13_count != 3'h7;
  wire        _arFIFOMap_14_T_2 = auto_in_ar_bits_id == 4'hE & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_14_T_6 =
    _in_0_r_bits_T_11 == 4'hE & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_14_count;
  reg         arFIFOMap_14_last;
  wire        _arFIFOMap_14_T_22 = arFIFOMap_14_count != 3'h7;
  wire        _awFIFOMap_14_T_2 = auto_in_aw_bits_id == 4'hE & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_14_T_5 = _in_0_b_bits_T_5 == 4'hE & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_14_count;
  reg         awFIFOMap_14_last;
  wire        _awFIFOMap_14_T_21 = awFIFOMap_14_count != 3'h7;
  wire        _arFIFOMap_15_T_2 = (&auto_in_ar_bits_id) & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_15_T_6 =
    (&_in_0_r_bits_T_11) & _arFIFOMap_15_T_4 & _in_0_r_bits_T_2;
  reg  [2:0]  arFIFOMap_15_count;
  reg         arFIFOMap_15_last;
  wire        _arFIFOMap_15_T_22 = arFIFOMap_15_count != 3'h7;
  wire        _awFIFOMap_15_T_2 = (&auto_in_aw_bits_id) & _awFIFOMap_15_T_1;
  wire        _awFIFOMap_15_T_5 = (&_in_0_b_bits_T_5) & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_15_count;
  reg         awFIFOMap_15_last;
  wire        _awFIFOMap_15_T_21 = awFIFOMap_15_count != 3'h7;
  wire [15:0] _GEN =
    {{(arFIFOMap_15_count == 3'h0 | arFIFOMap_15_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_15_T_22},
     {(arFIFOMap_14_count == 3'h0 | arFIFOMap_14_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_14_T_22},
     {(arFIFOMap_13_count == 3'h0 | arFIFOMap_13_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_13_T_22},
     {(arFIFOMap_12_count == 3'h0 | arFIFOMap_12_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_12_T_22},
     {(arFIFOMap_11_count == 3'h0 | arFIFOMap_11_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_11_T_22},
     {(arFIFOMap_10_count == 3'h0 | arFIFOMap_10_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_10_T_22},
     {(arFIFOMap_9_count == 3'h0 | arFIFOMap_9_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_9_T_22},
     {(arFIFOMap_8_count == 3'h0 | arFIFOMap_8_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_8_T_22},
     {(arFIFOMap_7_count == 3'h0 | arFIFOMap_7_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_7_T_22},
     {(arFIFOMap_6_count == 3'h0 | arFIFOMap_6_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_6_T_22},
     {(arFIFOMap_5_count == 3'h0 | arFIFOMap_5_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_5_T_22},
     {(arFIFOMap_4_count == 3'h0 | arFIFOMap_4_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_4_T_22},
     {(arFIFOMap_3_count == 3'h0 | arFIFOMap_3_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_3_T_22},
     {(arFIFOMap_2_count == 3'h0 | arFIFOMap_2_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_2_T_22},
     {(arFIFOMap_1_count == 3'h0 | arFIFOMap_1_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_1_T_22},
     {(arFIFOMap_0_count == 3'h0 | arFIFOMap_0_last == auto_in_ar_bits_addr[14])
        & _arFIFOMap_0_T_22}};
  wire        in_0_ar_valid = auto_in_ar_valid & _GEN[auto_in_ar_bits_id];
  assign nodeIn_ar_ready = _portsAROI_in_0_ar_ready_T_2 & _GEN[auto_in_ar_bits_id];
  reg         latched;
  wire        _nodeIn_aw_ready_T = latched | _awIn_0_io_enq_ready;
  wire [15:0] _GEN_0 =
    {{(awFIFOMap_15_count == 3'h0 | awFIFOMap_15_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_15_T_21},
     {(awFIFOMap_14_count == 3'h0 | awFIFOMap_14_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_14_T_21},
     {(awFIFOMap_13_count == 3'h0 | awFIFOMap_13_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_13_T_21},
     {(awFIFOMap_12_count == 3'h0 | awFIFOMap_12_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_12_T_21},
     {(awFIFOMap_11_count == 3'h0 | awFIFOMap_11_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_11_T_21},
     {(awFIFOMap_10_count == 3'h0 | awFIFOMap_10_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_10_T_21},
     {(awFIFOMap_9_count == 3'h0 | awFIFOMap_9_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_9_T_21},
     {(awFIFOMap_8_count == 3'h0 | awFIFOMap_8_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_8_T_21},
     {(awFIFOMap_7_count == 3'h0 | awFIFOMap_7_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_7_T_21},
     {(awFIFOMap_6_count == 3'h0 | awFIFOMap_6_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_6_T_21},
     {(awFIFOMap_5_count == 3'h0 | awFIFOMap_5_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_5_T_21},
     {(awFIFOMap_4_count == 3'h0 | awFIFOMap_4_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_4_T_21},
     {(awFIFOMap_3_count == 3'h0 | awFIFOMap_3_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_3_T_21},
     {(awFIFOMap_2_count == 3'h0 | awFIFOMap_2_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_2_T_21},
     {(awFIFOMap_1_count == 3'h0 | awFIFOMap_1_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_1_T_21},
     {(awFIFOMap_0_count == 3'h0 | awFIFOMap_0_last == auto_in_aw_bits_addr[14])
        & _awFIFOMap_0_T_21}};
  wire        in_0_aw_valid =
    auto_in_aw_valid & _nodeIn_aw_ready_T & _GEN_0[auto_in_aw_bits_id];
  assign nodeIn_aw_ready =
    _portsAWOI_in_0_aw_ready_T_2 & _nodeIn_aw_ready_T & _GEN_0[auto_in_aw_bits_id];
  wire        _awIn_0_io_enq_valid_T_1 = auto_in_aw_valid & ~latched;
  wire        in_0_w_valid = auto_in_w_valid & _awIn_0_io_deq_valid;
  assign _portsAROI_in_0_ar_ready_T_2 =
    ~(auto_in_ar_bits_addr[14]) & auto_out_0_ar_ready | auto_in_ar_bits_addr[14]
    & auto_out_1_ar_ready;
  assign _portsAWOI_in_0_aw_ready_T_2 =
    ~(auto_in_aw_bits_addr[14]) & auto_out_0_aw_ready | auto_in_aw_bits_addr[14]
    & auto_out_1_aw_ready;
  assign _portsWOI_in_0_w_ready_T_2 =
    _awIn_0_io_deq_bits[0] & auto_out_0_w_ready | _awIn_0_io_deq_bits[1]
    & auto_out_1_w_ready;
  reg         idle_2;
  wire        anyValid = auto_out_0_r_valid | auto_out_1_r_valid;
  wire [1:0]  readys_valid = {auto_out_1_r_valid, auto_out_0_r_valid};
  reg  [1:0]  readys_mask;
  wire [1:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0]  readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & ({_readys_filter_T_1[0], auto_out_1_r_valid} | _readys_filter_T_1));
  wire        prefixOR_1 = readys_readys[0] & auto_out_0_r_valid;
  wire        winner_2_1 = readys_readys[1] & auto_out_1_r_valid;
  reg         state_2_0;
  reg         state_2_1;
  wire        muxState_2_0 = idle_2 ? prefixOR_1 : state_2_0;
  wire        muxState_2_1 = idle_2 ? winner_2_1 : state_2_1;
  assign in_0_r_valid =
    idle_2 ? anyValid : state_2_0 & auto_out_0_r_valid | state_2_1 & auto_out_1_r_valid;
  assign _in_0_r_bits_T_2 = muxState_2_0 | muxState_2_1;
  assign _in_0_r_bits_T_11 =
    (muxState_2_0 ? auto_out_0_r_bits_id : 4'h0)
    | (muxState_2_1 ? auto_out_1_r_bits_id : 4'h0);
  reg         idle_3;
  wire        anyValid_1 = auto_out_0_b_valid | auto_out_1_b_valid;
  wire [1:0]  readys_valid_1 = {auto_out_1_b_valid, auto_out_0_b_valid};
  reg  [1:0]  readys_mask_1;
  wire [1:0]  _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;
  wire [1:0]  readys_readys_1 =
    ~({readys_mask_1[1], _readys_filter_T_3[1] | readys_mask_1[0]}
      & ({_readys_filter_T_3[0], auto_out_1_b_valid} | _readys_filter_T_3));
  wire        winner_3_0 = readys_readys_1[0] & auto_out_0_b_valid;
  wire        winner_3_1 = readys_readys_1[1] & auto_out_1_b_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_arFIFOMap_0_T_6 | (|arFIFOMap_0_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_0_T_2 | _arFIFOMap_0_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_0_T_5 | (|awFIFOMap_0_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_0_T_2 | _awFIFOMap_0_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_1_T_6 | (|arFIFOMap_1_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_1_T_2 | _arFIFOMap_1_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_1_T_5 | (|awFIFOMap_1_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_1_T_2 | _awFIFOMap_1_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_2_T_6 | (|arFIFOMap_2_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_2_T_2 | _arFIFOMap_2_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_2_T_5 | (|awFIFOMap_2_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_2_T_2 | _awFIFOMap_2_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_3_T_6 | (|arFIFOMap_3_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_3_T_2 | _arFIFOMap_3_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_3_T_5 | (|awFIFOMap_3_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_3_T_2 | _awFIFOMap_3_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_4_T_6 | (|arFIFOMap_4_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_4_T_2 | _arFIFOMap_4_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_4_T_5 | (|awFIFOMap_4_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_4_T_2 | _awFIFOMap_4_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_5_T_6 | (|arFIFOMap_5_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_5_T_2 | _arFIFOMap_5_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_5_T_5 | (|awFIFOMap_5_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_5_T_2 | _awFIFOMap_5_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_6_T_6 | (|arFIFOMap_6_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_6_T_2 | _arFIFOMap_6_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_6_T_5 | (|awFIFOMap_6_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_6_T_2 | _awFIFOMap_6_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_7_T_6 | (|arFIFOMap_7_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_7_T_2 | _arFIFOMap_7_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_7_T_5 | (|awFIFOMap_7_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_7_T_2 | _awFIFOMap_7_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_8_T_6 | (|arFIFOMap_8_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_8_T_2 | _arFIFOMap_8_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_8_T_5 | (|awFIFOMap_8_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_8_T_2 | _awFIFOMap_8_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_9_T_6 | (|arFIFOMap_9_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_9_T_2 | _arFIFOMap_9_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_9_T_5 | (|awFIFOMap_9_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_9_T_2 | _awFIFOMap_9_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_10_T_6 | (|arFIFOMap_10_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_10_T_2 | _arFIFOMap_10_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_10_T_5 | (|awFIFOMap_10_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_10_T_2 | _awFIFOMap_10_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_11_T_6 | (|arFIFOMap_11_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_11_T_2 | _arFIFOMap_11_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_11_T_5 | (|awFIFOMap_11_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_11_T_2 | _awFIFOMap_11_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_12_T_6 | (|arFIFOMap_12_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_12_T_2 | _arFIFOMap_12_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_12_T_5 | (|awFIFOMap_12_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_12_T_2 | _awFIFOMap_12_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_13_T_6 | (|arFIFOMap_13_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_13_T_2 | _arFIFOMap_13_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_13_T_5 | (|awFIFOMap_13_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_13_T_2 | _awFIFOMap_13_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_14_T_6 | (|arFIFOMap_14_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_14_T_2 | _arFIFOMap_14_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_14_T_5 | (|awFIFOMap_14_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_14_T_2 | _awFIFOMap_14_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_15_T_6 | (|arFIFOMap_15_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_15_T_2 | _arFIFOMap_15_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_15_T_5 | (|awFIFOMap_15_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_15_T_2 | _awFIFOMap_15_T_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~prefixOR_1 | ~winner_2_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:275 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~anyValid | prefixOR_1 | winner_2_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_3_0 | ~winner_3_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:275 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~anyValid_1 | winner_3_0 | winner_3_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_3_0;
  reg         state_3_1;
  assign in_0_b_valid =
    idle_3 ? anyValid_1 : state_3_0 & auto_out_0_b_valid | state_3_1 & auto_out_1_b_valid;
  assign _in_0_b_bits_T_5 =
    ((idle_3 ? winner_3_0 : state_3_0) ? auto_out_0_b_bits_id : 4'h0)
    | ((idle_3 ? winner_3_1 : state_3_1) ? auto_out_1_b_bits_id : 4'h0);
  wire [1:0]  _readys_mask_T = readys_readys & readys_valid;
  wire [1:0]  _readys_mask_T_5 = readys_readys_1 & readys_valid_1;
  always @(posedge clock) begin
    if (reset) begin
      arFIFOMap_0_count <= 3'h0;
      awFIFOMap_0_count <= 3'h0;
      arFIFOMap_1_count <= 3'h0;
      awFIFOMap_1_count <= 3'h0;
      arFIFOMap_2_count <= 3'h0;
      awFIFOMap_2_count <= 3'h0;
      arFIFOMap_3_count <= 3'h0;
      awFIFOMap_3_count <= 3'h0;
      arFIFOMap_4_count <= 3'h0;
      awFIFOMap_4_count <= 3'h0;
      arFIFOMap_5_count <= 3'h0;
      awFIFOMap_5_count <= 3'h0;
      arFIFOMap_6_count <= 3'h0;
      awFIFOMap_6_count <= 3'h0;
      arFIFOMap_7_count <= 3'h0;
      awFIFOMap_7_count <= 3'h0;
      arFIFOMap_8_count <= 3'h0;
      awFIFOMap_8_count <= 3'h0;
      arFIFOMap_9_count <= 3'h0;
      awFIFOMap_9_count <= 3'h0;
      arFIFOMap_10_count <= 3'h0;
      awFIFOMap_10_count <= 3'h0;
      arFIFOMap_11_count <= 3'h0;
      awFIFOMap_11_count <= 3'h0;
      arFIFOMap_12_count <= 3'h0;
      awFIFOMap_12_count <= 3'h0;
      arFIFOMap_13_count <= 3'h0;
      awFIFOMap_13_count <= 3'h0;
      arFIFOMap_14_count <= 3'h0;
      awFIFOMap_14_count <= 3'h0;
      arFIFOMap_15_count <= 3'h0;
      awFIFOMap_15_count <= 3'h0;
      latched <= 1'h0;
      idle_2 <= 1'h1;
      readys_mask <= 2'h3;
      state_2_0 <= 1'h0;
      state_2_1 <= 1'h0;
      idle_3 <= 1'h1;
      readys_mask_1 <= 2'h3;
      state_3_0 <= 1'h0;
      state_3_1 <= 1'h0;
    end
    else begin
      arFIFOMap_0_count <=
        3'(3'(arFIFOMap_0_count + {2'h0, _arFIFOMap_0_T_2}) - {2'h0, _arFIFOMap_0_T_6});
      awFIFOMap_0_count <=
        3'(3'(awFIFOMap_0_count + {2'h0, _awFIFOMap_0_T_2}) - {2'h0, _awFIFOMap_0_T_5});
      arFIFOMap_1_count <=
        3'(3'(arFIFOMap_1_count + {2'h0, _arFIFOMap_1_T_2}) - {2'h0, _arFIFOMap_1_T_6});
      awFIFOMap_1_count <=
        3'(3'(awFIFOMap_1_count + {2'h0, _awFIFOMap_1_T_2}) - {2'h0, _awFIFOMap_1_T_5});
      arFIFOMap_2_count <=
        3'(3'(arFIFOMap_2_count + {2'h0, _arFIFOMap_2_T_2}) - {2'h0, _arFIFOMap_2_T_6});
      awFIFOMap_2_count <=
        3'(3'(awFIFOMap_2_count + {2'h0, _awFIFOMap_2_T_2}) - {2'h0, _awFIFOMap_2_T_5});
      arFIFOMap_3_count <=
        3'(3'(arFIFOMap_3_count + {2'h0, _arFIFOMap_3_T_2}) - {2'h0, _arFIFOMap_3_T_6});
      awFIFOMap_3_count <=
        3'(3'(awFIFOMap_3_count + {2'h0, _awFIFOMap_3_T_2}) - {2'h0, _awFIFOMap_3_T_5});
      arFIFOMap_4_count <=
        3'(3'(arFIFOMap_4_count + {2'h0, _arFIFOMap_4_T_2}) - {2'h0, _arFIFOMap_4_T_6});
      awFIFOMap_4_count <=
        3'(3'(awFIFOMap_4_count + {2'h0, _awFIFOMap_4_T_2}) - {2'h0, _awFIFOMap_4_T_5});
      arFIFOMap_5_count <=
        3'(3'(arFIFOMap_5_count + {2'h0, _arFIFOMap_5_T_2}) - {2'h0, _arFIFOMap_5_T_6});
      awFIFOMap_5_count <=
        3'(3'(awFIFOMap_5_count + {2'h0, _awFIFOMap_5_T_2}) - {2'h0, _awFIFOMap_5_T_5});
      arFIFOMap_6_count <=
        3'(3'(arFIFOMap_6_count + {2'h0, _arFIFOMap_6_T_2}) - {2'h0, _arFIFOMap_6_T_6});
      awFIFOMap_6_count <=
        3'(3'(awFIFOMap_6_count + {2'h0, _awFIFOMap_6_T_2}) - {2'h0, _awFIFOMap_6_T_5});
      arFIFOMap_7_count <=
        3'(3'(arFIFOMap_7_count + {2'h0, _arFIFOMap_7_T_2}) - {2'h0, _arFIFOMap_7_T_6});
      awFIFOMap_7_count <=
        3'(3'(awFIFOMap_7_count + {2'h0, _awFIFOMap_7_T_2}) - {2'h0, _awFIFOMap_7_T_5});
      arFIFOMap_8_count <=
        3'(3'(arFIFOMap_8_count + {2'h0, _arFIFOMap_8_T_2}) - {2'h0, _arFIFOMap_8_T_6});
      awFIFOMap_8_count <=
        3'(3'(awFIFOMap_8_count + {2'h0, _awFIFOMap_8_T_2}) - {2'h0, _awFIFOMap_8_T_5});
      arFIFOMap_9_count <=
        3'(3'(arFIFOMap_9_count + {2'h0, _arFIFOMap_9_T_2}) - {2'h0, _arFIFOMap_9_T_6});
      awFIFOMap_9_count <=
        3'(3'(awFIFOMap_9_count + {2'h0, _awFIFOMap_9_T_2}) - {2'h0, _awFIFOMap_9_T_5});
      arFIFOMap_10_count <=
        3'(3'(arFIFOMap_10_count + {2'h0, _arFIFOMap_10_T_2})
           - {2'h0, _arFIFOMap_10_T_6});
      awFIFOMap_10_count <=
        3'(3'(awFIFOMap_10_count + {2'h0, _awFIFOMap_10_T_2})
           - {2'h0, _awFIFOMap_10_T_5});
      arFIFOMap_11_count <=
        3'(3'(arFIFOMap_11_count + {2'h0, _arFIFOMap_11_T_2})
           - {2'h0, _arFIFOMap_11_T_6});
      awFIFOMap_11_count <=
        3'(3'(awFIFOMap_11_count + {2'h0, _awFIFOMap_11_T_2})
           - {2'h0, _awFIFOMap_11_T_5});
      arFIFOMap_12_count <=
        3'(3'(arFIFOMap_12_count + {2'h0, _arFIFOMap_12_T_2})
           - {2'h0, _arFIFOMap_12_T_6});
      awFIFOMap_12_count <=
        3'(3'(awFIFOMap_12_count + {2'h0, _awFIFOMap_12_T_2})
           - {2'h0, _awFIFOMap_12_T_5});
      arFIFOMap_13_count <=
        3'(3'(arFIFOMap_13_count + {2'h0, _arFIFOMap_13_T_2})
           - {2'h0, _arFIFOMap_13_T_6});
      awFIFOMap_13_count <=
        3'(3'(awFIFOMap_13_count + {2'h0, _awFIFOMap_13_T_2})
           - {2'h0, _awFIFOMap_13_T_5});
      arFIFOMap_14_count <=
        3'(3'(arFIFOMap_14_count + {2'h0, _arFIFOMap_14_T_2})
           - {2'h0, _arFIFOMap_14_T_6});
      awFIFOMap_14_count <=
        3'(3'(awFIFOMap_14_count + {2'h0, _awFIFOMap_14_T_2})
           - {2'h0, _awFIFOMap_14_T_5});
      arFIFOMap_15_count <=
        3'(3'(arFIFOMap_15_count + {2'h0, _arFIFOMap_15_T_2})
           - {2'h0, _arFIFOMap_15_T_6});
      awFIFOMap_15_count <=
        3'(3'(awFIFOMap_15_count + {2'h0, _awFIFOMap_15_T_2})
           - {2'h0, _awFIFOMap_15_T_5});
      latched <=
        ~(_portsAWOI_in_0_aw_ready_T_2 & in_0_aw_valid)
        & (_awIn_0_io_enq_ready & _awIn_0_io_enq_valid_T_1 | latched);
      idle_2 <= auto_in_r_ready & in_0_r_valid | ~anyValid & idle_2;
      if (idle_2 & (|readys_valid))
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      if (idle_2) begin
        state_2_0 <= prefixOR_1;
        state_2_1 <= winner_2_1;
      end
      idle_3 <= auto_in_b_ready & in_0_b_valid | ~anyValid_1 & idle_3;
      if (idle_3 & (|readys_valid_1))
        readys_mask_1 <= _readys_mask_T_5 | {_readys_mask_T_5[0], 1'h0};
      if (idle_3) begin
        state_3_0 <= winner_3_0;
        state_3_1 <= winner_3_1;
      end
    end
    if (_arFIFOMap_0_T_2)
      arFIFOMap_0_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_0_T_2)
      awFIFOMap_0_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_1_T_2)
      arFIFOMap_1_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_1_T_2)
      awFIFOMap_1_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_2_T_2)
      arFIFOMap_2_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_2_T_2)
      awFIFOMap_2_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_3_T_2)
      arFIFOMap_3_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_3_T_2)
      awFIFOMap_3_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_4_T_2)
      arFIFOMap_4_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_4_T_2)
      awFIFOMap_4_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_5_T_2)
      arFIFOMap_5_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_5_T_2)
      awFIFOMap_5_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_6_T_2)
      arFIFOMap_6_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_6_T_2)
      awFIFOMap_6_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_7_T_2)
      arFIFOMap_7_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_7_T_2)
      awFIFOMap_7_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_8_T_2)
      arFIFOMap_8_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_8_T_2)
      awFIFOMap_8_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_9_T_2)
      arFIFOMap_9_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_9_T_2)
      awFIFOMap_9_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_10_T_2)
      arFIFOMap_10_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_10_T_2)
      awFIFOMap_10_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_11_T_2)
      arFIFOMap_11_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_11_T_2)
      awFIFOMap_11_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_12_T_2)
      arFIFOMap_12_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_12_T_2)
      awFIFOMap_12_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_13_T_2)
      arFIFOMap_13_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_13_T_2)
      awFIFOMap_13_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_14_T_2)
      arFIFOMap_14_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_14_T_2)
      awFIFOMap_14_last <= auto_in_aw_bits_addr[14];
    if (_arFIFOMap_15_T_2)
      arFIFOMap_15_last <= auto_in_ar_bits_addr[14];
    if (_awFIFOMap_15_T_2)
      awFIFOMap_15_last <= auto_in_aw_bits_addr[14];
  end // always @(posedge)
  Queue2_UInt2 awIn_0 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awIn_0_io_enq_ready),
    .io_enq_valid (_awIn_0_io_enq_valid_T_1),
    .io_enq_bits  ({auto_in_aw_bits_addr[14], ~(auto_in_aw_bits_addr[14])}),
    .io_deq_ready (auto_in_w_valid & auto_in_w_bits_last & _portsWOI_in_0_w_ready_T_2),
    .io_deq_valid (_awIn_0_io_deq_valid),
    .io_deq_bits  (_awIn_0_io_deq_bits)
  );
  assign auto_in_aw_ready = nodeIn_aw_ready;
  assign auto_in_w_ready = _portsWOI_in_0_w_ready_T_2 & _awIn_0_io_deq_valid;
  assign auto_in_b_valid = in_0_b_valid;
  assign auto_in_b_bits_id = _in_0_b_bits_T_5;
  assign auto_in_ar_ready = nodeIn_ar_ready;
  assign auto_in_r_valid = in_0_r_valid;
  assign auto_in_r_bits_id = _in_0_r_bits_T_11;
  assign auto_in_r_bits_data =
    (muxState_2_0 ? auto_out_0_r_bits_data : 64'h0)
    | (muxState_2_1 ? auto_out_1_r_bits_data : 64'h0);
  assign auto_in_r_bits_last = _in_0_r_bits_T_2;
  assign auto_out_1_aw_valid = in_0_aw_valid & auto_in_aw_bits_addr[14];
  assign auto_out_1_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_1_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_1_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[1];
  assign auto_out_1_w_bits_data = auto_in_w_bits_data;
  assign auto_out_1_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_1_b_ready = auto_in_b_ready & (idle_3 ? readys_readys_1[1] : state_3_1);
  assign auto_out_1_ar_valid = in_0_ar_valid & auto_in_ar_bits_addr[14];
  assign auto_out_1_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_1_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_1_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_1_r_ready = auto_in_r_ready & (idle_2 ? readys_readys[1] : state_2_1);
  assign auto_out_0_aw_valid = in_0_aw_valid & ~(auto_in_aw_bits_addr[14]);
  assign auto_out_0_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_0_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_0_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[0];
  assign auto_out_0_w_bits_data = auto_in_w_bits_data;
  assign auto_out_0_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_0_b_ready = auto_in_b_ready & (idle_3 ? readys_readys_1[0] : state_3_0);
  assign auto_out_0_ar_valid = in_0_ar_valid & ~(auto_in_ar_bits_addr[14]);
  assign auto_out_0_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_0_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_0_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_0_r_ready = auto_in_r_ready & (idle_2 ? readys_readys[0] : state_2_0);
endmodule

