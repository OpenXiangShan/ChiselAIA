// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module IMSIC(
  input         clock,
  input         reset,
  output        toCSR_rdata_valid,
  output [63:0] toCSR_rdata_bits,
  output        toCSR_illegal,
  output        toCSR_pendings_0,
  output        toCSR_pendings_1,
  output        toCSR_pendings_2,
  output        toCSR_pendings_3,
  output        toCSR_pendings_4,
  output        toCSR_pendings_5,
  output [31:0] toCSR_topeis_0,
  output [31:0] toCSR_topeis_1,
  output [31:0] toCSR_topeis_2,
  input         fromCSR_addr_valid,
  input  [11:0] fromCSR_addr_bits,
  input         fromCSR_virt,
  input  [1:0]  fromCSR_priv,
  input  [5:0]  fromCSR_vgein,
  input         fromCSR_wdata_valid,
  input  [1:0]  fromCSR_wdata_bits_op,
  input  [63:0] fromCSR_wdata_bits_data,
  input         fromCSR_claims_0,
  input         fromCSR_claims_1,
  input         fromCSR_claims_2,
  input  [7:0]  io_seteipnum,
  input         io_valid_0,
  input         io_valid_1,
  input         io_valid_2,
  input         io_valid_3,
  input         io_valid_4,
  input         io_valid_5,
  input         msiio_msi_vld_req,
  output        msiio_msi_vld_ack
);

  wire        _intFile_5_toCSR_illegal;
  wire [7:0]  _intFile_5_toCSR_topei;
  wire        _intFile_4_toCSR_illegal;
  wire [7:0]  _intFile_4_toCSR_topei;
  wire        _intFile_3_toCSR_illegal;
  wire [7:0]  _intFile_3_toCSR_topei;
  wire        _intFile_2_toCSR_illegal;
  wire [7:0]  _intFile_2_toCSR_topei;
  wire        _intFile_1_toCSR_illegal;
  wire [7:0]  _intFile_1_toCSR_topei;
  wire        _intFile_toCSR_illegal;
  wire [7:0]  _intFile_toCSR_topei;
  wire [7:0]  _imsicGateWay_msi_data_o;
  wire        _imsicGateWay_msi_valid_o_0;
  wire        _imsicGateWay_msi_valid_o_1;
  wire        _imsicGateWay_msi_valid_o_2;
  wire        _imsicGateWay_msi_valid_o_3;
  wire        _imsicGateWay_msi_valid_o_4;
  wire        _imsicGateWay_msi_valid_o_5;
  wire [2:0]  pv = {fromCSR_priv, fromCSR_virt};
  wire        _GEN = pv == 3'h6;
  wire        _GEN_0 = pv == 3'h2;
  wire        _GEN_1 = pv == 3'h3;
  wire [63:0] _intFilesSelOH_T_4 = 64'h1 << 6'(fromCSR_vgein + 6'h2);
  wire [5:0]  intFilesSelOH =
    _GEN ? 6'h1 : _GEN_0 ? 6'h2 : _GEN_1 ? _intFilesSelOH_T_4[5:0] : 6'h0;
  wire [7:0]  _toCSR_topeis_2_T_8 =
    {8{fromCSR_vgein[1:0] == 2'h0}} & _intFile_2_toCSR_topei
    | {8{fromCSR_vgein[1:0] == 2'h1}} & _intFile_3_toCSR_topei
    | {8{fromCSR_vgein[1:0] == 2'h2}} & _intFile_4_toCSR_topei
    | {8{&(fromCSR_vgein[1:0])}} & _intFile_5_toCSR_topei;
  reg         toCSR_illegal_REG;
  always @(posedge clock)
    toCSR_illegal_REG <= fromCSR_addr_valid;
  IMSICGateWay imsicGateWay (
    .clock             (clock),
    .reset             (reset),
    .msiio_msi_vld_req (msiio_msi_vld_req),
    .msiio_msi_vld_ack (msiio_msi_vld_ack),
    .io_seteipnum      (io_seteipnum),
    .io_valid_0        (io_valid_0),
    .io_valid_1        (io_valid_1),
    .io_valid_2        (io_valid_2),
    .io_valid_3        (io_valid_3),
    .io_valid_4        (io_valid_4),
    .io_valid_5        (io_valid_5),
    .msi_data_o        (_imsicGateWay_msi_data_o),
    .msi_valid_o_0     (_imsicGateWay_msi_valid_o_0),
    .msi_valid_o_1     (_imsicGateWay_msi_valid_o_1),
    .msi_valid_o_2     (_imsicGateWay_msi_valid_o_2),
    .msi_valid_o_3     (_imsicGateWay_msi_valid_o_3),
    .msi_valid_o_4     (_imsicGateWay_msi_valid_o_4),
    .msi_valid_o_5     (_imsicGateWay_msi_valid_o_5)
  );
  IntFile intFile (
    .clock                   (clock),
    .reset                   (reset),
    .fromCSR_seteipnum_valid (_imsicGateWay_msi_valid_o_0),
    .fromCSR_seteipnum_bits  (_imsicGateWay_msi_data_o),
    .fromCSR_addr_valid      (fromCSR_addr_valid & intFilesSelOH[0]),
    .fromCSR_addr_bits       (fromCSR_addr_bits),
    .fromCSR_wdata_valid     (fromCSR_wdata_valid & intFilesSelOH[0]),
    .fromCSR_wdata_bits_op   (fromCSR_wdata_bits_op),
    .fromCSR_wdata_bits_data (fromCSR_wdata_bits_data),
    .fromCSR_claim           (fromCSR_claims_0 & intFilesSelOH[0]),
    .toCSR_rdata_valid       (/* unused */),
    .toCSR_rdata_bits        (/* unused */),
    .toCSR_illegal           (_intFile_toCSR_illegal),
    .toCSR_pending           (toCSR_pendings_0),
    .toCSR_topei             (_intFile_toCSR_topei)
  );
  IntFile intFile_1 (
    .clock                   (clock),
    .reset                   (reset),
    .fromCSR_seteipnum_valid (_imsicGateWay_msi_valid_o_1),
    .fromCSR_seteipnum_bits  (_imsicGateWay_msi_data_o),
    .fromCSR_addr_valid      (fromCSR_addr_valid & intFilesSelOH[1]),
    .fromCSR_addr_bits       (fromCSR_addr_bits),
    .fromCSR_wdata_valid     (fromCSR_wdata_valid & intFilesSelOH[1]),
    .fromCSR_wdata_bits_op   (fromCSR_wdata_bits_op),
    .fromCSR_wdata_bits_data (fromCSR_wdata_bits_data),
    .fromCSR_claim           (fromCSR_claims_1 & intFilesSelOH[1]),
    .toCSR_rdata_valid       (/* unused */),
    .toCSR_rdata_bits        (/* unused */),
    .toCSR_illegal           (_intFile_1_toCSR_illegal),
    .toCSR_pending           (toCSR_pendings_1),
    .toCSR_topei             (_intFile_1_toCSR_topei)
  );
  IntFile intFile_2 (
    .clock                   (clock),
    .reset                   (reset),
    .fromCSR_seteipnum_valid (_imsicGateWay_msi_valid_o_2),
    .fromCSR_seteipnum_bits  (_imsicGateWay_msi_data_o),
    .fromCSR_addr_valid      (fromCSR_addr_valid & intFilesSelOH[2]),
    .fromCSR_addr_bits       (fromCSR_addr_bits),
    .fromCSR_wdata_valid     (fromCSR_wdata_valid & intFilesSelOH[2]),
    .fromCSR_wdata_bits_op   (fromCSR_wdata_bits_op),
    .fromCSR_wdata_bits_data (fromCSR_wdata_bits_data),
    .fromCSR_claim           (fromCSR_claims_2 & intFilesSelOH[2]),
    .toCSR_rdata_valid       (/* unused */),
    .toCSR_rdata_bits        (/* unused */),
    .toCSR_illegal           (_intFile_2_toCSR_illegal),
    .toCSR_pending           (toCSR_pendings_2),
    .toCSR_topei             (_intFile_2_toCSR_topei)
  );
  IntFile intFile_3 (
    .clock                   (clock),
    .reset                   (reset),
    .fromCSR_seteipnum_valid (_imsicGateWay_msi_valid_o_3),
    .fromCSR_seteipnum_bits  (_imsicGateWay_msi_data_o),
    .fromCSR_addr_valid      (fromCSR_addr_valid & intFilesSelOH[3]),
    .fromCSR_addr_bits       (fromCSR_addr_bits),
    .fromCSR_wdata_valid     (fromCSR_wdata_valid & intFilesSelOH[3]),
    .fromCSR_wdata_bits_op   (fromCSR_wdata_bits_op),
    .fromCSR_wdata_bits_data (fromCSR_wdata_bits_data),
    .fromCSR_claim           (fromCSR_claims_2 & intFilesSelOH[3]),
    .toCSR_rdata_valid       (/* unused */),
    .toCSR_rdata_bits        (/* unused */),
    .toCSR_illegal           (_intFile_3_toCSR_illegal),
    .toCSR_pending           (toCSR_pendings_3),
    .toCSR_topei             (_intFile_3_toCSR_topei)
  );
  IntFile intFile_4 (
    .clock                   (clock),
    .reset                   (reset),
    .fromCSR_seteipnum_valid (_imsicGateWay_msi_valid_o_4),
    .fromCSR_seteipnum_bits  (_imsicGateWay_msi_data_o),
    .fromCSR_addr_valid      (fromCSR_addr_valid & intFilesSelOH[4]),
    .fromCSR_addr_bits       (fromCSR_addr_bits),
    .fromCSR_wdata_valid     (fromCSR_wdata_valid & intFilesSelOH[4]),
    .fromCSR_wdata_bits_op   (fromCSR_wdata_bits_op),
    .fromCSR_wdata_bits_data (fromCSR_wdata_bits_data),
    .fromCSR_claim           (fromCSR_claims_2 & intFilesSelOH[4]),
    .toCSR_rdata_valid       (/* unused */),
    .toCSR_rdata_bits        (/* unused */),
    .toCSR_illegal           (_intFile_4_toCSR_illegal),
    .toCSR_pending           (toCSR_pendings_4),
    .toCSR_topei             (_intFile_4_toCSR_topei)
  );
  IntFile intFile_5 (
    .clock                   (clock),
    .reset                   (reset),
    .fromCSR_seteipnum_valid (_imsicGateWay_msi_valid_o_5),
    .fromCSR_seteipnum_bits  (_imsicGateWay_msi_data_o),
    .fromCSR_addr_valid      (fromCSR_addr_valid & intFilesSelOH[5]),
    .fromCSR_addr_bits       (fromCSR_addr_bits),
    .fromCSR_wdata_valid     (fromCSR_wdata_valid & intFilesSelOH[5]),
    .fromCSR_wdata_bits_op   (fromCSR_wdata_bits_op),
    .fromCSR_wdata_bits_data (fromCSR_wdata_bits_data),
    .fromCSR_claim           (fromCSR_claims_2 & intFilesSelOH[5]),
    .toCSR_rdata_valid       (toCSR_rdata_valid),
    .toCSR_rdata_bits        (toCSR_rdata_bits),
    .toCSR_illegal           (_intFile_5_toCSR_illegal),
    .toCSR_pending           (toCSR_pendings_5),
    .toCSR_topei             (_intFile_5_toCSR_topei)
  );
  assign toCSR_illegal =
    toCSR_illegal_REG
    & (_intFile_toCSR_illegal | _intFile_1_toCSR_illegal | _intFile_2_toCSR_illegal
       | _intFile_3_toCSR_illegal | _intFile_4_toCSR_illegal | _intFile_5_toCSR_illegal
       | (|(fromCSR_vgein[5:2])) | ~(_GEN | _GEN_0) & ~_GEN_1);
  assign toCSR_topeis_0 = {8'h0, _intFile_toCSR_topei, 8'h0, _intFile_toCSR_topei};
  assign toCSR_topeis_1 = {8'h0, _intFile_1_toCSR_topei, 8'h0, _intFile_1_toCSR_topei};
  assign toCSR_topeis_2 = {8'h0, _toCSR_topeis_2_T_8, 8'h0, _toCSR_topeis_2_T_8};
endmodule

