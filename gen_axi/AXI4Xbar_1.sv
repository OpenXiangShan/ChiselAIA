// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module AXI4Xbar_1(
  input         clock,
  input         reset,
  input         auto_in_1_aw_valid,
  input  [4:0]  auto_in_1_aw_bits_id,
  input  [31:0] auto_in_1_aw_bits_addr,
  input  [2:0]  auto_in_1_aw_bits_size,
  input         auto_in_1_w_valid,
  input  [31:0] auto_in_1_w_bits_data,
  input  [3:0]  auto_in_1_w_bits_strb,
  input         auto_in_1_w_bits_last,
  input         auto_in_1_b_ready,
  output        auto_in_1_b_valid,
  output [4:0]  auto_in_1_b_bits_id,
  output        auto_in_1_r_valid,
  output [4:0]  auto_in_1_r_bits_id,
  input         auto_in_0_aw_valid,
  input  [3:0]  auto_in_0_aw_bits_id,
  input  [31:0] auto_in_0_aw_bits_addr,
  input  [7:0]  auto_in_0_aw_bits_len,
  input  [2:0]  auto_in_0_aw_bits_size,
  input  [1:0]  auto_in_0_aw_bits_burst,
  input         auto_in_0_aw_bits_lock,
  input  [3:0]  auto_in_0_aw_bits_cache,
  input  [2:0]  auto_in_0_aw_bits_prot,
  input  [3:0]  auto_in_0_aw_bits_qos,
  input         auto_in_0_w_valid,
  input  [31:0] auto_in_0_w_bits_data,
  input  [3:0]  auto_in_0_w_bits_strb,
  input         auto_in_0_w_bits_last,
  input         auto_in_0_b_ready,
  output        auto_in_0_b_valid,
  output [3:0]  auto_in_0_b_bits_id,
  output [1:0]  auto_in_0_b_bits_resp,
  output        auto_in_0_ar_ready,
  input         auto_in_0_ar_valid,
  input  [3:0]  auto_in_0_ar_bits_id,
  input  [31:0] auto_in_0_ar_bits_addr,
  input  [7:0]  auto_in_0_ar_bits_len,
  input  [2:0]  auto_in_0_ar_bits_size,
  input  [1:0]  auto_in_0_ar_bits_burst,
  input         auto_in_0_ar_bits_lock,
  input  [3:0]  auto_in_0_ar_bits_cache,
  input  [2:0]  auto_in_0_ar_bits_prot,
  input  [3:0]  auto_in_0_ar_bits_qos,
  input         auto_in_0_r_ready,
  output        auto_in_0_r_valid,
  output [3:0]  auto_in_0_r_bits_id,
  output [31:0] auto_in_0_r_bits_data,
  output [1:0]  auto_in_0_r_bits_resp,
  output        auto_in_0_r_bits_last,
  output        auto_out_3_aw_valid,
  output [5:0]  auto_out_3_aw_bits_id,
  output [31:0] auto_out_3_aw_bits_addr,
  output [7:0]  auto_out_3_aw_bits_len,
  output [2:0]  auto_out_3_aw_bits_size,
  output [1:0]  auto_out_3_aw_bits_burst,
  output        auto_out_3_aw_bits_lock,
  output [3:0]  auto_out_3_aw_bits_cache,
  output [2:0]  auto_out_3_aw_bits_prot,
  output [3:0]  auto_out_3_aw_bits_qos,
  output        auto_out_3_w_valid,
  output [31:0] auto_out_3_w_bits_data,
  output [3:0]  auto_out_3_w_bits_strb,
  output        auto_out_3_w_bits_last,
  output        auto_out_3_b_ready,
  input         auto_out_3_b_valid,
  input  [5:0]  auto_out_3_b_bits_id,
  input  [1:0]  auto_out_3_b_bits_resp,
  input         auto_out_3_ar_ready,
  output        auto_out_3_ar_valid,
  output [5:0]  auto_out_3_ar_bits_id,
  output [31:0] auto_out_3_ar_bits_addr,
  output [7:0]  auto_out_3_ar_bits_len,
  output [2:0]  auto_out_3_ar_bits_size,
  output [1:0]  auto_out_3_ar_bits_burst,
  output        auto_out_3_ar_bits_lock,
  output [3:0]  auto_out_3_ar_bits_cache,
  output [2:0]  auto_out_3_ar_bits_prot,
  output [3:0]  auto_out_3_ar_bits_qos,
  output        auto_out_3_r_ready,
  input         auto_out_3_r_valid,
  input  [5:0]  auto_out_3_r_bits_id,
  input  [31:0] auto_out_3_r_bits_data,
  input  [1:0]  auto_out_3_r_bits_resp,
  input         auto_out_3_r_bits_last,
  output        auto_out_2_aw_valid,
  output [5:0]  auto_out_2_aw_bits_id,
  output [31:0] auto_out_2_aw_bits_addr,
  output [7:0]  auto_out_2_aw_bits_len,
  output [2:0]  auto_out_2_aw_bits_size,
  output [1:0]  auto_out_2_aw_bits_burst,
  output        auto_out_2_aw_bits_lock,
  output [3:0]  auto_out_2_aw_bits_cache,
  output [2:0]  auto_out_2_aw_bits_prot,
  output [3:0]  auto_out_2_aw_bits_qos,
  output        auto_out_2_w_valid,
  output [31:0] auto_out_2_w_bits_data,
  output [3:0]  auto_out_2_w_bits_strb,
  output        auto_out_2_w_bits_last,
  output        auto_out_2_b_ready,
  input         auto_out_2_b_valid,
  input  [5:0]  auto_out_2_b_bits_id,
  input  [1:0]  auto_out_2_b_bits_resp,
  input         auto_out_2_ar_ready,
  output        auto_out_2_ar_valid,
  output [5:0]  auto_out_2_ar_bits_id,
  output [31:0] auto_out_2_ar_bits_addr,
  output [7:0]  auto_out_2_ar_bits_len,
  output [2:0]  auto_out_2_ar_bits_size,
  output [1:0]  auto_out_2_ar_bits_burst,
  output        auto_out_2_ar_bits_lock,
  output [3:0]  auto_out_2_ar_bits_cache,
  output [2:0]  auto_out_2_ar_bits_prot,
  output [3:0]  auto_out_2_ar_bits_qos,
  output        auto_out_2_r_ready,
  input         auto_out_2_r_valid,
  input  [5:0]  auto_out_2_r_bits_id,
  input  [31:0] auto_out_2_r_bits_data,
  input  [1:0]  auto_out_2_r_bits_resp,
  input         auto_out_2_r_bits_last,
  output        auto_out_1_aw_valid,
  output [5:0]  auto_out_1_aw_bits_id,
  output [31:0] auto_out_1_aw_bits_addr,
  output [7:0]  auto_out_1_aw_bits_len,
  output [2:0]  auto_out_1_aw_bits_size,
  output [1:0]  auto_out_1_aw_bits_burst,
  output        auto_out_1_aw_bits_lock,
  output [3:0]  auto_out_1_aw_bits_cache,
  output [2:0]  auto_out_1_aw_bits_prot,
  output [3:0]  auto_out_1_aw_bits_qos,
  output        auto_out_1_w_valid,
  output [31:0] auto_out_1_w_bits_data,
  output [3:0]  auto_out_1_w_bits_strb,
  output        auto_out_1_w_bits_last,
  output        auto_out_1_b_ready,
  input         auto_out_1_b_valid,
  input  [5:0]  auto_out_1_b_bits_id,
  input  [1:0]  auto_out_1_b_bits_resp,
  input         auto_out_1_ar_ready,
  output        auto_out_1_ar_valid,
  output [5:0]  auto_out_1_ar_bits_id,
  output [31:0] auto_out_1_ar_bits_addr,
  output [7:0]  auto_out_1_ar_bits_len,
  output [2:0]  auto_out_1_ar_bits_size,
  output [1:0]  auto_out_1_ar_bits_burst,
  output        auto_out_1_ar_bits_lock,
  output [3:0]  auto_out_1_ar_bits_cache,
  output [2:0]  auto_out_1_ar_bits_prot,
  output [3:0]  auto_out_1_ar_bits_qos,
  output        auto_out_1_r_ready,
  input         auto_out_1_r_valid,
  input  [5:0]  auto_out_1_r_bits_id,
  input  [31:0] auto_out_1_r_bits_data,
  input  [1:0]  auto_out_1_r_bits_resp,
  input         auto_out_1_r_bits_last,
  output        auto_out_0_aw_valid,
  output [5:0]  auto_out_0_aw_bits_id,
  output [31:0] auto_out_0_aw_bits_addr,
  output [7:0]  auto_out_0_aw_bits_len,
  output [2:0]  auto_out_0_aw_bits_size,
  output [1:0]  auto_out_0_aw_bits_burst,
  output        auto_out_0_aw_bits_lock,
  output [3:0]  auto_out_0_aw_bits_cache,
  output [2:0]  auto_out_0_aw_bits_prot,
  output [3:0]  auto_out_0_aw_bits_qos,
  output        auto_out_0_w_valid,
  output [31:0] auto_out_0_w_bits_data,
  output [3:0]  auto_out_0_w_bits_strb,
  output        auto_out_0_w_bits_last,
  output        auto_out_0_b_ready,
  input         auto_out_0_b_valid,
  input  [5:0]  auto_out_0_b_bits_id,
  input  [1:0]  auto_out_0_b_bits_resp,
  input         auto_out_0_ar_ready,
  output        auto_out_0_ar_valid,
  output [5:0]  auto_out_0_ar_bits_id,
  output [31:0] auto_out_0_ar_bits_addr,
  output [7:0]  auto_out_0_ar_bits_len,
  output [2:0]  auto_out_0_ar_bits_size,
  output [1:0]  auto_out_0_ar_bits_burst,
  output        auto_out_0_ar_bits_lock,
  output [3:0]  auto_out_0_ar_bits_cache,
  output [2:0]  auto_out_0_ar_bits_prot,
  output [3:0]  auto_out_0_ar_bits_qos,
  output        auto_out_0_r_ready,
  input         auto_out_0_r_valid,
  input  [5:0]  auto_out_0_r_bits_id,
  input  [31:0] auto_out_0_r_bits_data,
  input  [1:0]  auto_out_0_r_bits_resp,
  input         auto_out_0_r_bits_last
);

  wire [4:0]  _in_1_b_bits_T_13;
  wire        in_1_b_valid;
  wire        allowed_7_3;
  wire        allowed_7_2;
  wire        allowed_7_1;
  wire        allowed_7_0;
  wire [3:0]  _in_0_b_bits_T_13;
  wire        in_0_b_valid;
  wire        allowed_5_3;
  wire        allowed_5_2;
  wire        allowed_5_1;
  wire        allowed_5_0;
  wire [3:0]  _in_0_r_bits_T_27;
  wire        _in_0_r_bits_T_6;
  wire        in_0_r_valid;
  wire        allowed_4_3;
  wire        allowed_4_2;
  wire        allowed_4_1;
  wire        allowed_4_0;
  wire        _out_3_w_valid_T_4;
  wire        allowed_3_0;
  wire        out_3_aw_valid;
  wire        _out_2_w_valid_T_4;
  wire        allowed_2_0;
  wire        out_2_aw_valid;
  wire        _out_1_w_valid_T_4;
  wire        allowed_1_0;
  wire        out_1_aw_valid;
  wire        _out_0_w_valid_T_4;
  wire        allowed_0;
  wire        out_0_aw_valid;
  wire        _portsAROI_in_0_ar_ready_T_6;
  wire        nodeIn_ar_ready;
  wire        _awOut_3_io_enq_ready;
  wire        _awOut_3_io_deq_valid;
  wire [1:0]  _awOut_3_io_deq_bits;
  wire        _awOut_2_io_enq_ready;
  wire        _awOut_2_io_deq_valid;
  wire [1:0]  _awOut_2_io_deq_bits;
  wire        _awOut_1_io_enq_ready;
  wire        _awOut_1_io_deq_valid;
  wire [1:0]  _awOut_1_io_deq_bits;
  wire        _awOut_0_io_enq_ready;
  wire        _awOut_0_io_deq_valid;
  wire [1:0]  _awOut_0_io_deq_bits;
  wire        _awIn_1_io_enq_ready;
  wire        _awIn_1_io_deq_valid;
  wire [3:0]  _awIn_1_io_deq_bits;
  wire        _awIn_0_io_enq_ready;
  wire        _awIn_0_io_deq_valid;
  wire [3:0]  _awIn_0_io_deq_bits;
  wire        requestARIO_0_0 =
    {auto_in_0_ar_bits_addr[31],
     auto_in_0_ar_bits_addr[16:15],
     auto_in_0_ar_bits_addr[12]} == 4'h0
    | {~(auto_in_0_ar_bits_addr[31]), auto_in_0_ar_bits_addr[16:15]} == 3'h0;
  wire [16:0] _requestARIO_T_16 = auto_in_0_ar_bits_addr[31:15] ^ 17'h10001;
  wire        requestARIO_0_1 =
    {auto_in_0_ar_bits_addr[31],
     auto_in_0_ar_bits_addr[16:15],
     ~(auto_in_0_ar_bits_addr[12])} == 4'h0
    | {_requestARIO_T_16[16], _requestARIO_T_16[1:0]} == 3'h0;
  wire [16:0] _requestARIO_T_27 = auto_in_0_ar_bits_addr[31:15] ^ 17'h10002;
  wire        requestARIO_0_2 =
    {auto_in_0_ar_bits_addr[31],
     auto_in_0_ar_bits_addr[16:15] ^ 2'h2,
     auto_in_0_ar_bits_addr[12]} == 4'h0
    | {_requestARIO_T_27[16], _requestARIO_T_27[1:0]} == 3'h0;
  wire [4:0]  _GEN = auto_in_0_ar_bits_addr[16:12] ^ 5'h11;
  wire [16:0] _requestARIO_T_38 = auto_in_0_ar_bits_addr[31:15] ^ 17'h10003;
  wire        requestARIO_0_3 =
    {auto_in_0_ar_bits_addr[31], _GEN[4:3], _GEN[0]} == 4'h0
    | {_requestARIO_T_38[16], _requestARIO_T_38[1:0]} == 3'h0;
  wire        requestAWIO_0_0 =
    {auto_in_0_aw_bits_addr[31],
     auto_in_0_aw_bits_addr[16:15],
     auto_in_0_aw_bits_addr[12]} == 4'h0
    | {~(auto_in_0_aw_bits_addr[31]), auto_in_0_aw_bits_addr[16:15]} == 3'h0;
  wire [16:0] _requestAWIO_T_16 = auto_in_0_aw_bits_addr[31:15] ^ 17'h10001;
  wire        requestAWIO_0_1 =
    {auto_in_0_aw_bits_addr[31],
     auto_in_0_aw_bits_addr[16:15],
     ~(auto_in_0_aw_bits_addr[12])} == 4'h0
    | {_requestAWIO_T_16[16], _requestAWIO_T_16[1:0]} == 3'h0;
  wire [16:0] _requestAWIO_T_27 = auto_in_0_aw_bits_addr[31:15] ^ 17'h10002;
  wire        requestAWIO_0_2 =
    {auto_in_0_aw_bits_addr[31],
     auto_in_0_aw_bits_addr[16:15] ^ 2'h2,
     auto_in_0_aw_bits_addr[12]} == 4'h0
    | {_requestAWIO_T_27[16], _requestAWIO_T_27[1:0]} == 3'h0;
  wire [4:0]  _GEN_0 = auto_in_0_aw_bits_addr[16:12] ^ 5'h11;
  wire [16:0] _requestAWIO_T_38 = auto_in_0_aw_bits_addr[31:15] ^ 17'h10003;
  wire        requestAWIO_0_3 =
    {auto_in_0_aw_bits_addr[31], _GEN_0[4:3], _GEN_0[0]} == 4'h0
    | {_requestAWIO_T_38[16], _requestAWIO_T_38[1:0]} == 3'h0;
  wire        requestAWIO_1_0 =
    {auto_in_1_aw_bits_addr[31],
     auto_in_1_aw_bits_addr[16:15],
     auto_in_1_aw_bits_addr[12]} == 4'h0
    | {~(auto_in_1_aw_bits_addr[31]), auto_in_1_aw_bits_addr[16:15]} == 3'h0;
  wire [16:0] _requestAWIO_T_60 = auto_in_1_aw_bits_addr[31:15] ^ 17'h10001;
  wire        requestAWIO_1_1 =
    {auto_in_1_aw_bits_addr[31],
     auto_in_1_aw_bits_addr[16:15],
     ~(auto_in_1_aw_bits_addr[12])} == 4'h0
    | {_requestAWIO_T_60[16], _requestAWIO_T_60[1:0]} == 3'h0;
  wire [16:0] _requestAWIO_T_71 = auto_in_1_aw_bits_addr[31:15] ^ 17'h10002;
  wire        requestAWIO_1_2 =
    {auto_in_1_aw_bits_addr[31],
     auto_in_1_aw_bits_addr[16:15] ^ 2'h2,
     auto_in_1_aw_bits_addr[12]} == 4'h0
    | {_requestAWIO_T_71[16], _requestAWIO_T_71[1:0]} == 3'h0;
  wire [4:0]  _GEN_1 = auto_in_1_aw_bits_addr[16:12] ^ 5'h11;
  wire [16:0] _requestAWIO_T_82 = auto_in_1_aw_bits_addr[31:15] ^ 17'h10003;
  wire        requestAWIO_1_3 =
    {auto_in_1_aw_bits_addr[31], _GEN_1[4:3], _GEN_1[0]} == 4'h0
    | {_requestAWIO_T_82[16], _requestAWIO_T_82[1:0]} == 3'h0;
  wire        requestROI_0_0 = auto_out_0_r_bits_id[5:4] == 2'h2;
  wire        requestROI_1_0 = auto_out_1_r_bits_id[5:4] == 2'h2;
  wire        requestROI_2_0 = auto_out_2_r_bits_id[5:4] == 2'h2;
  wire        requestROI_3_0 = auto_out_3_r_bits_id[5:4] == 2'h2;
  wire        requestBOI_0_0 = auto_out_0_b_bits_id[5:4] == 2'h2;
  wire        requestBOI_1_0 = auto_out_1_b_bits_id[5:4] == 2'h2;
  wire        requestBOI_2_0 = auto_out_2_b_bits_id[5:4] == 2'h2;
  wire        requestBOI_3_0 = auto_out_3_b_bits_id[5:4] == 2'h2;
  wire [5:0]  in_0_aw_bits_id = {2'h2, auto_in_0_aw_bits_id};
  wire [5:0]  in_0_ar_bits_id = {2'h2, auto_in_0_ar_bits_id};
  wire [1:0]  arTag =
    {|{requestARIO_0_3, requestARIO_0_2}, requestARIO_0_3 | requestARIO_0_1};
  wire [1:0]  awTag =
    {|{requestAWIO_0_3, requestAWIO_0_2}, requestAWIO_0_3 | requestAWIO_0_1};
  wire        _arFIFOMap_15_T_1 = nodeIn_ar_ready & auto_in_0_ar_valid;
  wire        _arFIFOMap_0_T_2 = auto_in_0_ar_bits_id == 4'h0 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_15_T_4 = auto_in_0_r_ready & in_0_r_valid;
  wire        _arFIFOMap_0_T_6 =
    _in_0_r_bits_T_27 == 4'h0 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_0_count;
  reg  [1:0]  arFIFOMap_0_last;
  wire        _arFIFOMap_0_T_22 = arFIFOMap_0_count != 3'h7;
  wire        _awFIFOMap_15_T_4 = auto_in_0_b_ready & in_0_b_valid;
  wire        _awFIFOMap_0_T_5 = _in_0_b_bits_T_13 == 4'h0 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_0_count;
  wire        _arFIFOMap_1_T_2 = auto_in_0_ar_bits_id == 4'h1 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_1_T_6 =
    _in_0_r_bits_T_27 == 4'h1 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_1_count;
  reg  [1:0]  arFIFOMap_1_last;
  wire        _arFIFOMap_1_T_22 = arFIFOMap_1_count != 3'h7;
  wire        _awFIFOMap_1_T_5 = _in_0_b_bits_T_13 == 4'h1 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_1_count;
  wire        _arFIFOMap_2_T_2 = auto_in_0_ar_bits_id == 4'h2 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_2_T_6 =
    _in_0_r_bits_T_27 == 4'h2 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_2_count;
  reg  [1:0]  arFIFOMap_2_last;
  wire        _arFIFOMap_2_T_22 = arFIFOMap_2_count != 3'h7;
  wire        _awFIFOMap_2_T_5 = _in_0_b_bits_T_13 == 4'h2 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_2_count;
  wire        _arFIFOMap_3_T_2 = auto_in_0_ar_bits_id == 4'h3 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_3_T_6 =
    _in_0_r_bits_T_27 == 4'h3 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_3_count;
  reg  [1:0]  arFIFOMap_3_last;
  wire        _arFIFOMap_3_T_22 = arFIFOMap_3_count != 3'h7;
  wire        _awFIFOMap_3_T_5 = _in_0_b_bits_T_13 == 4'h3 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_3_count;
  wire        _arFIFOMap_4_T_2 = auto_in_0_ar_bits_id == 4'h4 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_4_T_6 =
    _in_0_r_bits_T_27 == 4'h4 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_4_count;
  reg  [1:0]  arFIFOMap_4_last;
  wire        _arFIFOMap_4_T_22 = arFIFOMap_4_count != 3'h7;
  wire        _awFIFOMap_4_T_5 = _in_0_b_bits_T_13 == 4'h4 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_4_count;
  wire        _arFIFOMap_5_T_2 = auto_in_0_ar_bits_id == 4'h5 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_5_T_6 =
    _in_0_r_bits_T_27 == 4'h5 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_5_count;
  reg  [1:0]  arFIFOMap_5_last;
  wire        _arFIFOMap_5_T_22 = arFIFOMap_5_count != 3'h7;
  wire        _awFIFOMap_5_T_5 = _in_0_b_bits_T_13 == 4'h5 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_5_count;
  wire        _arFIFOMap_6_T_2 = auto_in_0_ar_bits_id == 4'h6 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_6_T_6 =
    _in_0_r_bits_T_27 == 4'h6 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_6_count;
  reg  [1:0]  arFIFOMap_6_last;
  wire        _arFIFOMap_6_T_22 = arFIFOMap_6_count != 3'h7;
  wire        _awFIFOMap_6_T_5 = _in_0_b_bits_T_13 == 4'h6 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_6_count;
  wire        _arFIFOMap_7_T_2 = auto_in_0_ar_bits_id == 4'h7 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_7_T_6 =
    _in_0_r_bits_T_27 == 4'h7 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_7_count;
  reg  [1:0]  arFIFOMap_7_last;
  wire        _arFIFOMap_7_T_22 = arFIFOMap_7_count != 3'h7;
  wire        _awFIFOMap_7_T_5 = _in_0_b_bits_T_13 == 4'h7 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_7_count;
  wire        _arFIFOMap_8_T_2 = auto_in_0_ar_bits_id == 4'h8 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_8_T_6 =
    _in_0_r_bits_T_27 == 4'h8 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_8_count;
  reg  [1:0]  arFIFOMap_8_last;
  wire        _arFIFOMap_8_T_22 = arFIFOMap_8_count != 3'h7;
  wire        _awFIFOMap_8_T_5 = _in_0_b_bits_T_13 == 4'h8 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_8_count;
  wire        _arFIFOMap_9_T_2 = auto_in_0_ar_bits_id == 4'h9 & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_9_T_6 =
    _in_0_r_bits_T_27 == 4'h9 & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_9_count;
  reg  [1:0]  arFIFOMap_9_last;
  wire        _arFIFOMap_9_T_22 = arFIFOMap_9_count != 3'h7;
  wire        _awFIFOMap_9_T_5 = _in_0_b_bits_T_13 == 4'h9 & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_9_count;
  wire        _arFIFOMap_10_T_2 = auto_in_0_ar_bits_id == 4'hA & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_10_T_6 =
    _in_0_r_bits_T_27 == 4'hA & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_10_count;
  reg  [1:0]  arFIFOMap_10_last;
  wire        _arFIFOMap_10_T_22 = arFIFOMap_10_count != 3'h7;
  wire        _awFIFOMap_10_T_5 = _in_0_b_bits_T_13 == 4'hA & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_10_count;
  wire        _arFIFOMap_11_T_2 = auto_in_0_ar_bits_id == 4'hB & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_11_T_6 =
    _in_0_r_bits_T_27 == 4'hB & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_11_count;
  reg  [1:0]  arFIFOMap_11_last;
  wire        _arFIFOMap_11_T_22 = arFIFOMap_11_count != 3'h7;
  wire        _awFIFOMap_11_T_5 = _in_0_b_bits_T_13 == 4'hB & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_11_count;
  wire        _arFIFOMap_12_T_2 = auto_in_0_ar_bits_id == 4'hC & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_12_T_6 =
    _in_0_r_bits_T_27 == 4'hC & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_12_count;
  reg  [1:0]  arFIFOMap_12_last;
  wire        _arFIFOMap_12_T_22 = arFIFOMap_12_count != 3'h7;
  wire        _awFIFOMap_12_T_5 = _in_0_b_bits_T_13 == 4'hC & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_12_count;
  wire        _arFIFOMap_13_T_2 = auto_in_0_ar_bits_id == 4'hD & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_13_T_6 =
    _in_0_r_bits_T_27 == 4'hD & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_13_count;
  reg  [1:0]  arFIFOMap_13_last;
  wire        _arFIFOMap_13_T_22 = arFIFOMap_13_count != 3'h7;
  wire        _awFIFOMap_13_T_5 = _in_0_b_bits_T_13 == 4'hD & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_13_count;
  wire        _arFIFOMap_14_T_2 = auto_in_0_ar_bits_id == 4'hE & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_14_T_6 =
    _in_0_r_bits_T_27 == 4'hE & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_14_count;
  reg  [1:0]  arFIFOMap_14_last;
  wire        _arFIFOMap_14_T_22 = arFIFOMap_14_count != 3'h7;
  wire        _awFIFOMap_14_T_5 = _in_0_b_bits_T_13 == 4'hE & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_14_count;
  wire        _arFIFOMap_15_T_2 = (&auto_in_0_ar_bits_id) & _arFIFOMap_15_T_1;
  wire        _arFIFOMap_15_T_6 =
    (&_in_0_r_bits_T_27) & _arFIFOMap_15_T_4 & _in_0_r_bits_T_6;
  reg  [2:0]  arFIFOMap_15_count;
  reg  [1:0]  arFIFOMap_15_last;
  wire        _arFIFOMap_15_T_22 = arFIFOMap_15_count != 3'h7;
  wire        _awFIFOMap_15_T_5 = (&_in_0_b_bits_T_13) & _awFIFOMap_15_T_4;
  reg  [2:0]  awFIFOMap_15_count;
  wire [15:0] _GEN_2 =
    {{(arFIFOMap_15_count == 3'h0 | arFIFOMap_15_last == arTag) & _arFIFOMap_15_T_22},
     {(arFIFOMap_14_count == 3'h0 | arFIFOMap_14_last == arTag) & _arFIFOMap_14_T_22},
     {(arFIFOMap_13_count == 3'h0 | arFIFOMap_13_last == arTag) & _arFIFOMap_13_T_22},
     {(arFIFOMap_12_count == 3'h0 | arFIFOMap_12_last == arTag) & _arFIFOMap_12_T_22},
     {(arFIFOMap_11_count == 3'h0 | arFIFOMap_11_last == arTag) & _arFIFOMap_11_T_22},
     {(arFIFOMap_10_count == 3'h0 | arFIFOMap_10_last == arTag) & _arFIFOMap_10_T_22},
     {(arFIFOMap_9_count == 3'h0 | arFIFOMap_9_last == arTag) & _arFIFOMap_9_T_22},
     {(arFIFOMap_8_count == 3'h0 | arFIFOMap_8_last == arTag) & _arFIFOMap_8_T_22},
     {(arFIFOMap_7_count == 3'h0 | arFIFOMap_7_last == arTag) & _arFIFOMap_7_T_22},
     {(arFIFOMap_6_count == 3'h0 | arFIFOMap_6_last == arTag) & _arFIFOMap_6_T_22},
     {(arFIFOMap_5_count == 3'h0 | arFIFOMap_5_last == arTag) & _arFIFOMap_5_T_22},
     {(arFIFOMap_4_count == 3'h0 | arFIFOMap_4_last == arTag) & _arFIFOMap_4_T_22},
     {(arFIFOMap_3_count == 3'h0 | arFIFOMap_3_last == arTag) & _arFIFOMap_3_T_22},
     {(arFIFOMap_2_count == 3'h0 | arFIFOMap_2_last == arTag) & _arFIFOMap_2_T_22},
     {(arFIFOMap_1_count == 3'h0 | arFIFOMap_1_last == arTag) & _arFIFOMap_1_T_22},
     {(arFIFOMap_0_count == 3'h0 | arFIFOMap_0_last == arTag) & _arFIFOMap_0_T_22}};
  wire        in_0_ar_valid = auto_in_0_ar_valid & _GEN_2[auto_in_0_ar_bits_id];
  assign nodeIn_ar_ready = _portsAROI_in_0_ar_ready_T_6 & _GEN_2[auto_in_0_ar_bits_id];
  reg         latched;
  wire [15:0] _GEN_3 =
    {{(awFIFOMap_15_count == 3'h0 | awTag == 2'h0) & awFIFOMap_15_count != 3'h7},
     {(awFIFOMap_14_count == 3'h0 | awTag == 2'h0) & awFIFOMap_14_count != 3'h7},
     {(awFIFOMap_13_count == 3'h0 | awTag == 2'h0) & awFIFOMap_13_count != 3'h7},
     {(awFIFOMap_12_count == 3'h0 | awTag == 2'h0) & awFIFOMap_12_count != 3'h7},
     {(awFIFOMap_11_count == 3'h0 | awTag == 2'h0) & awFIFOMap_11_count != 3'h7},
     {(awFIFOMap_10_count == 3'h0 | awTag == 2'h0) & awFIFOMap_10_count != 3'h7},
     {(awFIFOMap_9_count == 3'h0 | awTag == 2'h0) & awFIFOMap_9_count != 3'h7},
     {(awFIFOMap_8_count == 3'h0 | awTag == 2'h0) & awFIFOMap_8_count != 3'h7},
     {(awFIFOMap_7_count == 3'h0 | awTag == 2'h0) & awFIFOMap_7_count != 3'h7},
     {(awFIFOMap_6_count == 3'h0 | awTag == 2'h0) & awFIFOMap_6_count != 3'h7},
     {(awFIFOMap_5_count == 3'h0 | awTag == 2'h0) & awFIFOMap_5_count != 3'h7},
     {(awFIFOMap_4_count == 3'h0 | awTag == 2'h0) & awFIFOMap_4_count != 3'h7},
     {(awFIFOMap_3_count == 3'h0 | awTag == 2'h0) & awFIFOMap_3_count != 3'h7},
     {(awFIFOMap_2_count == 3'h0 | awTag == 2'h0) & awFIFOMap_2_count != 3'h7},
     {(awFIFOMap_1_count == 3'h0 | awTag == 2'h0) & awFIFOMap_1_count != 3'h7},
     {(awFIFOMap_0_count == 3'h0 | awTag == 2'h0) & awFIFOMap_0_count != 3'h7}};
  wire        in_0_aw_valid =
    auto_in_0_aw_valid & (latched | _awIn_0_io_enq_ready) & _GEN_3[auto_in_0_aw_bits_id];
  wire        _awIn_0_io_enq_valid_T_1 = auto_in_0_aw_valid & ~latched;
  wire        in_0_w_valid = auto_in_0_w_valid & _awIn_0_io_deq_valid;
  wire [5:0]  in_1_aw_bits_id = {1'h0, auto_in_1_aw_bits_id};
  wire [1:0]  awTag_1 =
    {|{requestAWIO_1_3, requestAWIO_1_2}, requestAWIO_1_3 | requestAWIO_1_1};
  wire        _awFIFOMap_15_T_27 = auto_in_1_b_ready & in_1_b_valid;
  wire        _awFIFOMap_16_T_5 = _in_1_b_bits_T_13 == 5'h10 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_16_count;
  wire        _awFIFOMap_17_T_5 = _in_1_b_bits_T_13 == 5'h11 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_17_count;
  wire        _awFIFOMap_18_T_5 = _in_1_b_bits_T_13 == 5'h12 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_18_count;
  wire        _awFIFOMap_19_T_5 = _in_1_b_bits_T_13 == 5'h13 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_19_count;
  wire        _awFIFOMap_20_T_5 = _in_1_b_bits_T_13 == 5'h14 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_20_count;
  wire        _awFIFOMap_21_T_5 = _in_1_b_bits_T_13 == 5'h15 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_21_count;
  wire        _awFIFOMap_22_T_5 = _in_1_b_bits_T_13 == 5'h16 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_22_count;
  wire        _awFIFOMap_23_T_5 = _in_1_b_bits_T_13 == 5'h17 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_23_count;
  wire        _awFIFOMap_24_T_5 = _in_1_b_bits_T_13 == 5'h18 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_24_count;
  wire        _awFIFOMap_25_T_5 = _in_1_b_bits_T_13 == 5'h19 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_25_count;
  wire        _awFIFOMap_26_T_5 = _in_1_b_bits_T_13 == 5'h1A & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_26_count;
  wire        _awFIFOMap_27_T_5 = _in_1_b_bits_T_13 == 5'h1B & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_27_count;
  wire        _awFIFOMap_28_T_5 = _in_1_b_bits_T_13 == 5'h1C & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_28_count;
  wire        _awFIFOMap_29_T_5 = _in_1_b_bits_T_13 == 5'h1D & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_29_count;
  wire        _awFIFOMap_30_T_5 = _in_1_b_bits_T_13 == 5'h1E & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_30_count;
  wire        _awFIFOMap_31_T_5 = (&_in_1_b_bits_T_13) & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_31_count;
  wire        _awFIFOMap_0_T_28 = _in_1_b_bits_T_13 == 5'h0 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_0_count_1;
  wire        _awFIFOMap_1_T_28 = _in_1_b_bits_T_13 == 5'h1 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_1_count_1;
  wire        _awFIFOMap_2_T_28 = _in_1_b_bits_T_13 == 5'h2 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_2_count_1;
  wire        _awFIFOMap_3_T_28 = _in_1_b_bits_T_13 == 5'h3 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_3_count_1;
  wire        _awFIFOMap_4_T_28 = _in_1_b_bits_T_13 == 5'h4 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_4_count_1;
  wire        _awFIFOMap_5_T_28 = _in_1_b_bits_T_13 == 5'h5 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_5_count_1;
  wire        _awFIFOMap_6_T_28 = _in_1_b_bits_T_13 == 5'h6 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_6_count_1;
  wire        _awFIFOMap_7_T_28 = _in_1_b_bits_T_13 == 5'h7 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_7_count_1;
  wire        _awFIFOMap_8_T_28 = _in_1_b_bits_T_13 == 5'h8 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_8_count_1;
  wire        _awFIFOMap_9_T_28 = _in_1_b_bits_T_13 == 5'h9 & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_9_count_1;
  wire        _awFIFOMap_10_T_28 = _in_1_b_bits_T_13 == 5'hA & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_10_count_1;
  wire        _awFIFOMap_11_T_28 = _in_1_b_bits_T_13 == 5'hB & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_11_count_1;
  wire        _awFIFOMap_12_T_28 = _in_1_b_bits_T_13 == 5'hC & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_12_count_1;
  wire        _awFIFOMap_13_T_28 = _in_1_b_bits_T_13 == 5'hD & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_13_count_1;
  wire        _awFIFOMap_14_T_28 = _in_1_b_bits_T_13 == 5'hE & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_14_count_1;
  wire        _awFIFOMap_15_T_28 = _in_1_b_bits_T_13 == 5'hF & _awFIFOMap_15_T_27;
  reg  [2:0]  awFIFOMap_15_count_1;
  reg         latched_1;
  wire [31:0] _GEN_4 =
    {{(awFIFOMap_31_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_31_count != 3'h7},
     {(awFIFOMap_30_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_30_count != 3'h7},
     {(awFIFOMap_29_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_29_count != 3'h7},
     {(awFIFOMap_28_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_28_count != 3'h7},
     {(awFIFOMap_27_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_27_count != 3'h7},
     {(awFIFOMap_26_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_26_count != 3'h7},
     {(awFIFOMap_25_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_25_count != 3'h7},
     {(awFIFOMap_24_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_24_count != 3'h7},
     {(awFIFOMap_23_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_23_count != 3'h7},
     {(awFIFOMap_22_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_22_count != 3'h7},
     {(awFIFOMap_21_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_21_count != 3'h7},
     {(awFIFOMap_20_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_20_count != 3'h7},
     {(awFIFOMap_19_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_19_count != 3'h7},
     {(awFIFOMap_18_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_18_count != 3'h7},
     {(awFIFOMap_17_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_17_count != 3'h7},
     {(awFIFOMap_16_count == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_16_count != 3'h7},
     {(awFIFOMap_15_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_15_count_1 != 3'h7},
     {(awFIFOMap_14_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_14_count_1 != 3'h7},
     {(awFIFOMap_13_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_13_count_1 != 3'h7},
     {(awFIFOMap_12_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_12_count_1 != 3'h7},
     {(awFIFOMap_11_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_11_count_1 != 3'h7},
     {(awFIFOMap_10_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_10_count_1 != 3'h7},
     {(awFIFOMap_9_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_9_count_1 != 3'h7},
     {(awFIFOMap_8_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_8_count_1 != 3'h7},
     {(awFIFOMap_7_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_7_count_1 != 3'h7},
     {(awFIFOMap_6_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_6_count_1 != 3'h7},
     {(awFIFOMap_5_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_5_count_1 != 3'h7},
     {(awFIFOMap_4_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_4_count_1 != 3'h7},
     {(awFIFOMap_3_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_3_count_1 != 3'h7},
     {(awFIFOMap_2_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_2_count_1 != 3'h7},
     {(awFIFOMap_1_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_1_count_1 != 3'h7},
     {(awFIFOMap_0_count_1 == 3'h0 | awTag_1 == 2'h0) & awFIFOMap_0_count_1 != 3'h7}};
  wire        in_1_aw_valid =
    auto_in_1_aw_valid & (latched_1 | _awIn_1_io_enq_ready)
    & _GEN_4[auto_in_1_aw_bits_id];
  wire        _awIn_1_io_enq_valid_T_1 = auto_in_1_aw_valid & ~latched_1;
  wire        in_1_w_valid = auto_in_1_w_valid & _awIn_1_io_deq_valid;
  reg         latched_2;
  wire        _awOut_0_io_enq_valid_T_1 = out_0_aw_valid & ~latched_2;
  reg         latched_3;
  wire        _awOut_1_io_enq_valid_T_1 = out_1_aw_valid & ~latched_3;
  reg         latched_4;
  wire        _awOut_2_io_enq_valid_T_1 = out_2_aw_valid & ~latched_4;
  reg         latched_5;
  wire        _awOut_3_io_enq_valid_T_1 = out_3_aw_valid & ~latched_5;
  wire        portsAROI_filtered_0_valid = in_0_ar_valid & requestARIO_0_0;
  wire        portsAROI_filtered_1_valid = in_0_ar_valid & requestARIO_0_1;
  wire        portsAROI_filtered_2_valid = in_0_ar_valid & requestARIO_0_2;
  wire        portsAROI_filtered_3_valid = in_0_ar_valid & requestARIO_0_3;
  assign _portsAROI_in_0_ar_ready_T_6 =
    requestARIO_0_0 & auto_out_0_ar_ready & allowed_0 | requestARIO_0_1
    & auto_out_1_ar_ready & allowed_1_0 | requestARIO_0_2 & auto_out_2_ar_ready
    & allowed_2_0 | requestARIO_0_3 & auto_out_3_ar_ready & allowed_3_0;
  wire        portsAWOI_filtered_0_valid = in_0_aw_valid & requestAWIO_0_0;
  wire        portsAWOI_filtered_1_valid = in_0_aw_valid & requestAWIO_0_1;
  wire        portsAWOI_filtered_2_valid = in_0_aw_valid & requestAWIO_0_2;
  wire        portsAWOI_filtered_3_valid = in_0_aw_valid & requestAWIO_0_3;
  wire        portsAWOI_filtered_1_0_valid = in_1_aw_valid & requestAWIO_1_0;
  wire        portsAWOI_filtered_1_1_valid = in_1_aw_valid & requestAWIO_1_1;
  wire        portsAWOI_filtered_1_2_valid = in_1_aw_valid & requestAWIO_1_2;
  wire        portsAWOI_filtered_1_3_valid = in_1_aw_valid & requestAWIO_1_3;
  wire        portsRIO_filtered_0_valid = auto_out_0_r_valid & requestROI_0_0;
  wire        portsRIO_filtered_1_valid = auto_out_0_r_valid & ~(auto_out_0_r_bits_id[5]);
  wire        portsRIO_filtered_1_0_valid = auto_out_1_r_valid & requestROI_1_0;
  wire        portsRIO_filtered_1_1_valid =
    auto_out_1_r_valid & ~(auto_out_1_r_bits_id[5]);
  wire        portsRIO_filtered_2_0_valid = auto_out_2_r_valid & requestROI_2_0;
  wire        portsRIO_filtered_2_1_valid =
    auto_out_2_r_valid & ~(auto_out_2_r_bits_id[5]);
  wire        portsRIO_filtered_3_0_valid = auto_out_3_r_valid & requestROI_3_0;
  wire        portsRIO_filtered_3_1_valid =
    auto_out_3_r_valid & ~(auto_out_3_r_bits_id[5]);
  wire        portsBIO_filtered_0_valid = auto_out_0_b_valid & requestBOI_0_0;
  wire        portsBIO_filtered_1_valid = auto_out_0_b_valid & ~(auto_out_0_b_bits_id[5]);
  wire        portsBIO_filtered_1_0_valid = auto_out_1_b_valid & requestBOI_1_0;
  wire        portsBIO_filtered_1_1_valid =
    auto_out_1_b_valid & ~(auto_out_1_b_bits_id[5]);
  wire        portsBIO_filtered_2_0_valid = auto_out_2_b_valid & requestBOI_2_0;
  wire        portsBIO_filtered_2_1_valid =
    auto_out_2_b_valid & ~(auto_out_2_b_bits_id[5]);
  wire        portsBIO_filtered_3_0_valid = auto_out_3_b_valid & requestBOI_3_0;
  wire        portsBIO_filtered_3_1_valid =
    auto_out_3_b_valid & ~(auto_out_3_b_bits_id[5]);
  reg         awOut_0_io_enq_bits_idle;
  wire        awOut_0_io_enq_bits_anyValid =
    portsAWOI_filtered_0_valid | portsAWOI_filtered_1_0_valid;
  wire [1:0]  awOut_0_io_enq_bits_readys_valid =
    {portsAWOI_filtered_1_0_valid, portsAWOI_filtered_0_valid};
  reg  [1:0]  awOut_0_io_enq_bits_readys_mask;
  wire [1:0]  _awOut_0_io_enq_bits_readys_filter_T_1 =
    awOut_0_io_enq_bits_readys_valid & ~awOut_0_io_enq_bits_readys_mask;
  wire [1:0]  awOut_0_io_enq_bits_readys_readys =
    ~({awOut_0_io_enq_bits_readys_mask[1],
       _awOut_0_io_enq_bits_readys_filter_T_1[1] | awOut_0_io_enq_bits_readys_mask[0]}
      & ({_awOut_0_io_enq_bits_readys_filter_T_1[0], portsAWOI_filtered_1_0_valid}
         | _awOut_0_io_enq_bits_readys_filter_T_1));
  wire        awOut_0_io_enq_bits_winner_0 =
    awOut_0_io_enq_bits_readys_readys[0] & portsAWOI_filtered_0_valid;
  wire        awOut_0_io_enq_bits_winner_1 =
    awOut_0_io_enq_bits_readys_readys[1] & portsAWOI_filtered_1_0_valid;
  reg         awOut_0_io_enq_bits_state_0;
  reg         awOut_0_io_enq_bits_state_1;
  wire        awOut_0_io_enq_bits_muxState_0 =
    awOut_0_io_enq_bits_idle ? awOut_0_io_enq_bits_winner_0 : awOut_0_io_enq_bits_state_0;
  wire        awOut_0_io_enq_bits_muxState_1 =
    awOut_0_io_enq_bits_idle ? awOut_0_io_enq_bits_winner_1 : awOut_0_io_enq_bits_state_1;
  assign out_0_aw_valid =
    awOut_0_io_enq_bits_idle
      ? awOut_0_io_enq_bits_anyValid
      : awOut_0_io_enq_bits_state_0 & portsAWOI_filtered_0_valid
        | awOut_0_io_enq_bits_state_1 & portsAWOI_filtered_1_0_valid;
  reg         idle;
  wire [1:0]  readys_valid = {1'h0, portsAROI_filtered_0_valid};
  reg  [1:0]  readys_mask;
  wire [1:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0]  readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & {2{_readys_filter_T_1[0]}});
  wire        winner_0 = readys_readys[0] & portsAROI_filtered_0_valid;
  reg         state_0;
  wire        muxState_0 = idle ? winner_0 : state_0;
  assign allowed_0 = idle ? readys_readys[0] : state_0;
  wire        out_0_ar_valid = (idle | state_0) & portsAROI_filtered_0_valid;
  assign _out_0_w_valid_T_4 =
    _awOut_0_io_deq_bits[0] & in_0_w_valid & _awIn_0_io_deq_bits[0]
    | _awOut_0_io_deq_bits[1] & in_1_w_valid & _awIn_1_io_deq_bits[0];
  reg         awOut_1_io_enq_bits_idle;
  wire        awOut_1_io_enq_bits_anyValid =
    portsAWOI_filtered_1_valid | portsAWOI_filtered_1_1_valid;
  wire [1:0]  awOut_1_io_enq_bits_readys_valid =
    {portsAWOI_filtered_1_1_valid, portsAWOI_filtered_1_valid};
  reg  [1:0]  awOut_1_io_enq_bits_readys_mask;
  wire [1:0]  _awOut_1_io_enq_bits_readys_filter_T_1 =
    awOut_1_io_enq_bits_readys_valid & ~awOut_1_io_enq_bits_readys_mask;
  wire [1:0]  awOut_1_io_enq_bits_readys_readys =
    ~({awOut_1_io_enq_bits_readys_mask[1],
       _awOut_1_io_enq_bits_readys_filter_T_1[1] | awOut_1_io_enq_bits_readys_mask[0]}
      & ({_awOut_1_io_enq_bits_readys_filter_T_1[0], portsAWOI_filtered_1_1_valid}
         | _awOut_1_io_enq_bits_readys_filter_T_1));
  wire        awOut_1_io_enq_bits_winner_0 =
    awOut_1_io_enq_bits_readys_readys[0] & portsAWOI_filtered_1_valid;
  wire        awOut_1_io_enq_bits_winner_1 =
    awOut_1_io_enq_bits_readys_readys[1] & portsAWOI_filtered_1_1_valid;
  reg         awOut_1_io_enq_bits_state_0;
  reg         awOut_1_io_enq_bits_state_1;
  wire        awOut_1_io_enq_bits_muxState_0 =
    awOut_1_io_enq_bits_idle ? awOut_1_io_enq_bits_winner_0 : awOut_1_io_enq_bits_state_0;
  wire        awOut_1_io_enq_bits_muxState_1 =
    awOut_1_io_enq_bits_idle ? awOut_1_io_enq_bits_winner_1 : awOut_1_io_enq_bits_state_1;
  assign out_1_aw_valid =
    awOut_1_io_enq_bits_idle
      ? awOut_1_io_enq_bits_anyValid
      : awOut_1_io_enq_bits_state_0 & portsAWOI_filtered_1_valid
        | awOut_1_io_enq_bits_state_1 & portsAWOI_filtered_1_1_valid;
  reg         idle_1;
  wire [1:0]  readys_valid_1 = {1'h0, portsAROI_filtered_1_valid};
  reg  [1:0]  readys_mask_1;
  wire [1:0]  _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;
  wire [1:0]  readys_readys_1 =
    ~({readys_mask_1[1], _readys_filter_T_3[1] | readys_mask_1[0]}
      & {2{_readys_filter_T_3[0]}});
  wire        winner_1_0 = readys_readys_1[0] & portsAROI_filtered_1_valid;
  reg         state_1_0;
  wire        muxState_1_0 = idle_1 ? winner_1_0 : state_1_0;
  assign allowed_1_0 = idle_1 ? readys_readys_1[0] : state_1_0;
  wire        out_1_ar_valid = (idle_1 | state_1_0) & portsAROI_filtered_1_valid;
  assign _out_1_w_valid_T_4 =
    _awOut_1_io_deq_bits[0] & in_0_w_valid & _awIn_0_io_deq_bits[1]
    | _awOut_1_io_deq_bits[1] & in_1_w_valid & _awIn_1_io_deq_bits[1];
  reg         awOut_2_io_enq_bits_idle;
  wire        awOut_2_io_enq_bits_anyValid =
    portsAWOI_filtered_2_valid | portsAWOI_filtered_1_2_valid;
  wire [1:0]  awOut_2_io_enq_bits_readys_valid =
    {portsAWOI_filtered_1_2_valid, portsAWOI_filtered_2_valid};
  reg  [1:0]  awOut_2_io_enq_bits_readys_mask;
  wire [1:0]  _awOut_2_io_enq_bits_readys_filter_T_1 =
    awOut_2_io_enq_bits_readys_valid & ~awOut_2_io_enq_bits_readys_mask;
  wire [1:0]  awOut_2_io_enq_bits_readys_readys =
    ~({awOut_2_io_enq_bits_readys_mask[1],
       _awOut_2_io_enq_bits_readys_filter_T_1[1] | awOut_2_io_enq_bits_readys_mask[0]}
      & ({_awOut_2_io_enq_bits_readys_filter_T_1[0], portsAWOI_filtered_1_2_valid}
         | _awOut_2_io_enq_bits_readys_filter_T_1));
  wire        awOut_2_io_enq_bits_winner_0 =
    awOut_2_io_enq_bits_readys_readys[0] & portsAWOI_filtered_2_valid;
  wire        awOut_2_io_enq_bits_winner_1 =
    awOut_2_io_enq_bits_readys_readys[1] & portsAWOI_filtered_1_2_valid;
  reg         awOut_2_io_enq_bits_state_0;
  reg         awOut_2_io_enq_bits_state_1;
  wire        awOut_2_io_enq_bits_muxState_0 =
    awOut_2_io_enq_bits_idle ? awOut_2_io_enq_bits_winner_0 : awOut_2_io_enq_bits_state_0;
  wire        awOut_2_io_enq_bits_muxState_1 =
    awOut_2_io_enq_bits_idle ? awOut_2_io_enq_bits_winner_1 : awOut_2_io_enq_bits_state_1;
  assign out_2_aw_valid =
    awOut_2_io_enq_bits_idle
      ? awOut_2_io_enq_bits_anyValid
      : awOut_2_io_enq_bits_state_0 & portsAWOI_filtered_2_valid
        | awOut_2_io_enq_bits_state_1 & portsAWOI_filtered_1_2_valid;
  reg         idle_2;
  wire [1:0]  readys_valid_2 = {1'h0, portsAROI_filtered_2_valid};
  reg  [1:0]  readys_mask_2;
  wire [1:0]  _readys_filter_T_5 = readys_valid_2 & ~readys_mask_2;
  wire [1:0]  readys_readys_2 =
    ~({readys_mask_2[1], _readys_filter_T_5[1] | readys_mask_2[0]}
      & {2{_readys_filter_T_5[0]}});
  wire        winner_2_0 = readys_readys_2[0] & portsAROI_filtered_2_valid;
  reg         state_2_0;
  wire        muxState_2_0 = idle_2 ? winner_2_0 : state_2_0;
  assign allowed_2_0 = idle_2 ? readys_readys_2[0] : state_2_0;
  wire        out_2_ar_valid = (idle_2 | state_2_0) & portsAROI_filtered_2_valid;
  assign _out_2_w_valid_T_4 =
    _awOut_2_io_deq_bits[0] & in_0_w_valid & _awIn_0_io_deq_bits[2]
    | _awOut_2_io_deq_bits[1] & in_1_w_valid & _awIn_1_io_deq_bits[2];
  reg         awOut_3_io_enq_bits_idle;
  wire        awOut_3_io_enq_bits_anyValid =
    portsAWOI_filtered_3_valid | portsAWOI_filtered_1_3_valid;
  wire [1:0]  awOut_3_io_enq_bits_readys_valid =
    {portsAWOI_filtered_1_3_valid, portsAWOI_filtered_3_valid};
  reg  [1:0]  awOut_3_io_enq_bits_readys_mask;
  wire [1:0]  _awOut_3_io_enq_bits_readys_filter_T_1 =
    awOut_3_io_enq_bits_readys_valid & ~awOut_3_io_enq_bits_readys_mask;
  wire [1:0]  awOut_3_io_enq_bits_readys_readys =
    ~({awOut_3_io_enq_bits_readys_mask[1],
       _awOut_3_io_enq_bits_readys_filter_T_1[1] | awOut_3_io_enq_bits_readys_mask[0]}
      & ({_awOut_3_io_enq_bits_readys_filter_T_1[0], portsAWOI_filtered_1_3_valid}
         | _awOut_3_io_enq_bits_readys_filter_T_1));
  wire        awOut_3_io_enq_bits_winner_0 =
    awOut_3_io_enq_bits_readys_readys[0] & portsAWOI_filtered_3_valid;
  wire        awOut_3_io_enq_bits_winner_1 =
    awOut_3_io_enq_bits_readys_readys[1] & portsAWOI_filtered_1_3_valid;
  reg         awOut_3_io_enq_bits_state_0;
  reg         awOut_3_io_enq_bits_state_1;
  wire        awOut_3_io_enq_bits_muxState_0 =
    awOut_3_io_enq_bits_idle ? awOut_3_io_enq_bits_winner_0 : awOut_3_io_enq_bits_state_0;
  wire        awOut_3_io_enq_bits_muxState_1 =
    awOut_3_io_enq_bits_idle ? awOut_3_io_enq_bits_winner_1 : awOut_3_io_enq_bits_state_1;
  assign out_3_aw_valid =
    awOut_3_io_enq_bits_idle
      ? awOut_3_io_enq_bits_anyValid
      : awOut_3_io_enq_bits_state_0 & portsAWOI_filtered_3_valid
        | awOut_3_io_enq_bits_state_1 & portsAWOI_filtered_1_3_valid;
  reg         idle_3;
  wire [1:0]  readys_valid_3 = {1'h0, portsAROI_filtered_3_valid};
  reg  [1:0]  readys_mask_3;
  wire [1:0]  _readys_filter_T_7 = readys_valid_3 & ~readys_mask_3;
  wire [1:0]  readys_readys_3 =
    ~({readys_mask_3[1], _readys_filter_T_7[1] | readys_mask_3[0]}
      & {2{_readys_filter_T_7[0]}});
  wire        winner_3_0 = readys_readys_3[0] & portsAROI_filtered_3_valid;
  reg         state_3_0;
  wire        muxState_3_0 = idle_3 ? winner_3_0 : state_3_0;
  assign allowed_3_0 = idle_3 ? readys_readys_3[0] : state_3_0;
  wire        out_3_ar_valid = (idle_3 | state_3_0) & portsAROI_filtered_3_valid;
  assign _out_3_w_valid_T_4 =
    _awOut_3_io_deq_bits[0] & in_0_w_valid & _awIn_0_io_deq_bits[3]
    | _awOut_3_io_deq_bits[1] & in_1_w_valid & _awIn_1_io_deq_bits[3];
  reg         idle_4;
  wire        anyValid_4 =
    portsRIO_filtered_0_valid | portsRIO_filtered_1_0_valid | portsRIO_filtered_2_0_valid
    | portsRIO_filtered_3_0_valid;
  wire [3:0]  readys_valid_4 =
    {portsRIO_filtered_3_0_valid,
     portsRIO_filtered_2_0_valid,
     portsRIO_filtered_1_0_valid,
     portsRIO_filtered_0_valid};
  reg  [3:0]  readys_mask_4;
  wire [3:0]  _readys_filter_T_9 = readys_valid_4 & ~readys_mask_4;
  wire [5:0]  _GEN_5 =
    {_readys_filter_T_9[2:0],
     portsRIO_filtered_3_0_valid,
     portsRIO_filtered_2_0_valid,
     portsRIO_filtered_1_0_valid}
    | {_readys_filter_T_9, portsRIO_filtered_3_0_valid, portsRIO_filtered_2_0_valid};
  wire [4:0]  _GEN_6 = _GEN_5[4:0] | {_readys_filter_T_9[3], _GEN_5[5:2]};
  wire [3:0]  readys_readys_4 =
    ~({readys_mask_4[3],
       _readys_filter_T_9[3] | readys_mask_4[2],
       _GEN_5[5] | readys_mask_4[1],
       _GEN_6[4] | readys_mask_4[0]} & _GEN_6[3:0]);
  wire        winner_4_0 = readys_readys_4[0] & portsRIO_filtered_0_valid;
  wire        winner_4_1 = readys_readys_4[1] & portsRIO_filtered_1_0_valid;
  wire        winner_4_2 = readys_readys_4[2] & portsRIO_filtered_2_0_valid;
  wire        winner_4_3 = readys_readys_4[3] & portsRIO_filtered_3_0_valid;
  reg         state_4_0;
  reg         state_4_1;
  reg         state_4_2;
  reg         state_4_3;
  wire        muxState_4_0 = idle_4 ? winner_4_0 : state_4_0;
  wire        muxState_4_1 = idle_4 ? winner_4_1 : state_4_1;
  wire        muxState_4_2 = idle_4 ? winner_4_2 : state_4_2;
  wire        muxState_4_3 = idle_4 ? winner_4_3 : state_4_3;
  assign allowed_4_0 = idle_4 ? readys_readys_4[0] : state_4_0;
  assign allowed_4_1 = idle_4 ? readys_readys_4[1] : state_4_1;
  assign allowed_4_2 = idle_4 ? readys_readys_4[2] : state_4_2;
  assign allowed_4_3 = idle_4 ? readys_readys_4[3] : state_4_3;
  assign in_0_r_valid =
    idle_4
      ? anyValid_4
      : state_4_0 & portsRIO_filtered_0_valid | state_4_1 & portsRIO_filtered_1_0_valid
        | state_4_2 & portsRIO_filtered_2_0_valid | state_4_3
        & portsRIO_filtered_3_0_valid;
  assign _in_0_r_bits_T_6 =
    muxState_4_0 & auto_out_0_r_bits_last | muxState_4_1 & auto_out_1_r_bits_last
    | muxState_4_2 & auto_out_2_r_bits_last | muxState_4_3 & auto_out_3_r_bits_last;
  assign _in_0_r_bits_T_27 =
    (muxState_4_0 ? auto_out_0_r_bits_id[3:0] : 4'h0)
    | (muxState_4_1 ? auto_out_1_r_bits_id[3:0] : 4'h0)
    | (muxState_4_2 ? auto_out_2_r_bits_id[3:0] : 4'h0)
    | (muxState_4_3 ? auto_out_3_r_bits_id[3:0] : 4'h0);
  reg         idle_5;
  wire        anyValid_5 =
    portsBIO_filtered_0_valid | portsBIO_filtered_1_0_valid | portsBIO_filtered_2_0_valid
    | portsBIO_filtered_3_0_valid;
  wire [3:0]  readys_valid_5 =
    {portsBIO_filtered_3_0_valid,
     portsBIO_filtered_2_0_valid,
     portsBIO_filtered_1_0_valid,
     portsBIO_filtered_0_valid};
  reg  [3:0]  readys_mask_5;
  wire [3:0]  _readys_filter_T_11 = readys_valid_5 & ~readys_mask_5;
  wire [5:0]  _GEN_7 =
    {_readys_filter_T_11[2:0],
     portsBIO_filtered_3_0_valid,
     portsBIO_filtered_2_0_valid,
     portsBIO_filtered_1_0_valid}
    | {_readys_filter_T_11, portsBIO_filtered_3_0_valid, portsBIO_filtered_2_0_valid};
  wire [4:0]  _GEN_8 = _GEN_7[4:0] | {_readys_filter_T_11[3], _GEN_7[5:2]};
  wire [3:0]  readys_readys_5 =
    ~({readys_mask_5[3],
       _readys_filter_T_11[3] | readys_mask_5[2],
       _GEN_7[5] | readys_mask_5[1],
       _GEN_8[4] | readys_mask_5[0]} & _GEN_8[3:0]);
  wire        winner_5_0 = readys_readys_5[0] & portsBIO_filtered_0_valid;
  wire        winner_5_1 = readys_readys_5[1] & portsBIO_filtered_1_0_valid;
  wire        winner_5_2 = readys_readys_5[2] & portsBIO_filtered_2_0_valid;
  wire        winner_5_3 = readys_readys_5[3] & portsBIO_filtered_3_0_valid;
  reg         state_5_0;
  reg         state_5_1;
  reg         state_5_2;
  reg         state_5_3;
  wire        muxState_5_0 = idle_5 ? winner_5_0 : state_5_0;
  wire        muxState_5_1 = idle_5 ? winner_5_1 : state_5_1;
  wire        muxState_5_2 = idle_5 ? winner_5_2 : state_5_2;
  wire        muxState_5_3 = idle_5 ? winner_5_3 : state_5_3;
  assign allowed_5_0 = idle_5 ? readys_readys_5[0] : state_5_0;
  assign allowed_5_1 = idle_5 ? readys_readys_5[1] : state_5_1;
  assign allowed_5_2 = idle_5 ? readys_readys_5[2] : state_5_2;
  assign allowed_5_3 = idle_5 ? readys_readys_5[3] : state_5_3;
  assign in_0_b_valid =
    idle_5
      ? anyValid_5
      : state_5_0 & portsBIO_filtered_0_valid | state_5_1 & portsBIO_filtered_1_0_valid
        | state_5_2 & portsBIO_filtered_2_0_valid | state_5_3
        & portsBIO_filtered_3_0_valid;
  assign _in_0_b_bits_T_13 =
    (muxState_5_0 ? auto_out_0_b_bits_id[3:0] : 4'h0)
    | (muxState_5_1 ? auto_out_1_b_bits_id[3:0] : 4'h0)
    | (muxState_5_2 ? auto_out_2_b_bits_id[3:0] : 4'h0)
    | (muxState_5_3 ? auto_out_3_b_bits_id[3:0] : 4'h0);
  reg         idle_6;
  wire        anyValid_6 =
    portsRIO_filtered_1_valid | portsRIO_filtered_1_1_valid | portsRIO_filtered_2_1_valid
    | portsRIO_filtered_3_1_valid;
  wire [3:0]  readys_valid_6 =
    {portsRIO_filtered_3_1_valid,
     portsRIO_filtered_2_1_valid,
     portsRIO_filtered_1_1_valid,
     portsRIO_filtered_1_valid};
  reg  [3:0]  readys_mask_6;
  wire [3:0]  _readys_filter_T_13 = readys_valid_6 & ~readys_mask_6;
  wire [5:0]  _GEN_9 =
    {_readys_filter_T_13[2:0],
     portsRIO_filtered_3_1_valid,
     portsRIO_filtered_2_1_valid,
     portsRIO_filtered_1_1_valid}
    | {_readys_filter_T_13, portsRIO_filtered_3_1_valid, portsRIO_filtered_2_1_valid};
  wire [4:0]  _GEN_10 = _GEN_9[4:0] | {_readys_filter_T_13[3], _GEN_9[5:2]};
  wire [3:0]  readys_readys_6 =
    ~({readys_mask_6[3],
       _readys_filter_T_13[3] | readys_mask_6[2],
       _GEN_9[5] | readys_mask_6[1],
       _GEN_10[4] | readys_mask_6[0]} & _GEN_10[3:0]);
  wire        winner_6_0 = readys_readys_6[0] & portsRIO_filtered_1_valid;
  wire        winner_6_1 = readys_readys_6[1] & portsRIO_filtered_1_1_valid;
  wire        winner_6_2 = readys_readys_6[2] & portsRIO_filtered_2_1_valid;
  wire        winner_6_3 = readys_readys_6[3] & portsRIO_filtered_3_1_valid;
  reg         state_6_0;
  reg         state_6_1;
  reg         state_6_2;
  reg         state_6_3;
  reg         idle_7;
  wire        anyValid_7 =
    portsBIO_filtered_1_valid | portsBIO_filtered_1_1_valid | portsBIO_filtered_2_1_valid
    | portsBIO_filtered_3_1_valid;
  wire [3:0]  readys_valid_7 =
    {portsBIO_filtered_3_1_valid,
     portsBIO_filtered_2_1_valid,
     portsBIO_filtered_1_1_valid,
     portsBIO_filtered_1_valid};
  reg  [3:0]  readys_mask_7;
  wire [3:0]  _readys_filter_T_15 = readys_valid_7 & ~readys_mask_7;
  wire [5:0]  _GEN_11 =
    {_readys_filter_T_15[2:0],
     portsBIO_filtered_3_1_valid,
     portsBIO_filtered_2_1_valid,
     portsBIO_filtered_1_1_valid}
    | {_readys_filter_T_15, portsBIO_filtered_3_1_valid, portsBIO_filtered_2_1_valid};
  wire [4:0]  _GEN_12 = _GEN_11[4:0] | {_readys_filter_T_15[3], _GEN_11[5:2]};
  wire [3:0]  readys_readys_7 =
    ~({readys_mask_7[3],
       _readys_filter_T_15[3] | readys_mask_7[2],
       _GEN_11[5] | readys_mask_7[1],
       _GEN_12[4] | readys_mask_7[0]} & _GEN_12[3:0]);
  wire        winner_7_0 = readys_readys_7[0] & portsBIO_filtered_1_valid;
  wire        winner_7_1 = readys_readys_7[1] & portsBIO_filtered_1_1_valid;
  wire        winner_7_2 = readys_readys_7[2] & portsBIO_filtered_2_1_valid;
  wire        winner_7_3 = readys_readys_7[3] & portsBIO_filtered_3_1_valid;
  `ifndef SYNTHESIS
    wire prefixOR_2 = winner_4_0 | winner_4_1;
    wire prefixOR_2_1 = winner_5_0 | winner_5_1;
    wire prefixOR_2_2 = winner_6_0 | winner_6_1;
    wire prefixOR_2_3 = winner_7_0 | winner_7_1;
    always @(posedge clock) begin
      if (~reset & ~(~_arFIFOMap_0_T_6 | (|arFIFOMap_0_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_0_T_2 | _arFIFOMap_0_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_0_T_5 | (|awFIFOMap_0_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_1_T_6 | (|arFIFOMap_1_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_1_T_2 | _arFIFOMap_1_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_1_T_5 | (|awFIFOMap_1_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_2_T_6 | (|arFIFOMap_2_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_2_T_2 | _arFIFOMap_2_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_2_T_5 | (|awFIFOMap_2_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_3_T_6 | (|arFIFOMap_3_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_3_T_2 | _arFIFOMap_3_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_3_T_5 | (|awFIFOMap_3_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_4_T_6 | (|arFIFOMap_4_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_4_T_2 | _arFIFOMap_4_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_4_T_5 | (|awFIFOMap_4_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_5_T_6 | (|arFIFOMap_5_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_5_T_2 | _arFIFOMap_5_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_5_T_5 | (|awFIFOMap_5_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_6_T_6 | (|arFIFOMap_6_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_6_T_2 | _arFIFOMap_6_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_6_T_5 | (|awFIFOMap_6_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_7_T_6 | (|arFIFOMap_7_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_7_T_2 | _arFIFOMap_7_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_7_T_5 | (|awFIFOMap_7_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_8_T_6 | (|arFIFOMap_8_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_8_T_2 | _arFIFOMap_8_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_8_T_5 | (|awFIFOMap_8_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_9_T_6 | (|arFIFOMap_9_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_9_T_2 | _arFIFOMap_9_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_9_T_5 | (|awFIFOMap_9_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_10_T_6 | (|arFIFOMap_10_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_10_T_2 | _arFIFOMap_10_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_10_T_5 | (|awFIFOMap_10_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_11_T_6 | (|arFIFOMap_11_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_11_T_2 | _arFIFOMap_11_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_11_T_5 | (|awFIFOMap_11_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_12_T_6 | (|arFIFOMap_12_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_12_T_2 | _arFIFOMap_12_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_12_T_5 | (|awFIFOMap_12_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_13_T_6 | (|arFIFOMap_13_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_13_T_2 | _arFIFOMap_13_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_13_T_5 | (|awFIFOMap_13_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_14_T_6 | (|arFIFOMap_14_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_14_T_2 | _arFIFOMap_14_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_14_T_5 | (|awFIFOMap_14_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_15_T_6 | (|arFIFOMap_15_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_arFIFOMap_15_T_2 | _arFIFOMap_15_T_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:123 assert (!req_fire  || count =/= flight.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_15_T_5 | (|awFIFOMap_15_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_16_T_5 | (|awFIFOMap_16_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_17_T_5 | (|awFIFOMap_17_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_18_T_5 | (|awFIFOMap_18_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_19_T_5 | (|awFIFOMap_19_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_20_T_5 | (|awFIFOMap_20_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_21_T_5 | (|awFIFOMap_21_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_22_T_5 | (|awFIFOMap_22_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_23_T_5 | (|awFIFOMap_23_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_24_T_5 | (|awFIFOMap_24_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_25_T_5 | (|awFIFOMap_25_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_26_T_5 | (|awFIFOMap_26_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_27_T_5 | (|awFIFOMap_27_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_28_T_5 | (|awFIFOMap_28_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_29_T_5 | (|awFIFOMap_29_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_30_T_5 | (|awFIFOMap_30_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_31_T_5 | (|awFIFOMap_31_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_0_T_28 | (|awFIFOMap_0_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_1_T_28 | (|awFIFOMap_1_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_2_T_28 | (|awFIFOMap_2_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_3_T_28 | (|awFIFOMap_3_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_4_T_28 | (|awFIFOMap_4_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_5_T_28 | (|awFIFOMap_5_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_6_T_28 | (|awFIFOMap_6_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_7_T_28 | (|awFIFOMap_7_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_8_T_28 | (|awFIFOMap_8_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_9_T_28 | (|awFIFOMap_9_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_10_T_28 | (|awFIFOMap_10_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_11_T_28 | (|awFIFOMap_11_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_12_T_28 | (|awFIFOMap_12_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_13_T_28 | (|awFIFOMap_13_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_14_T_28 | (|awFIFOMap_14_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_awFIFOMap_15_T_28 | (|awFIFOMap_15_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:122 assert (!resp_fire || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~awOut_0_io_enq_bits_winner_0 | ~awOut_0_io_enq_bits_winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:275 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~awOut_0_io_enq_bits_anyValid | awOut_0_io_enq_bits_winner_0
              | awOut_0_io_enq_bits_winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~portsAROI_filtered_0_valid | winner_0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~awOut_1_io_enq_bits_winner_0 | ~awOut_1_io_enq_bits_winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:275 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~awOut_1_io_enq_bits_anyValid | awOut_1_io_enq_bits_winner_0
              | awOut_1_io_enq_bits_winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~portsAROI_filtered_1_valid | winner_1_0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~awOut_2_io_enq_bits_winner_0 | ~awOut_2_io_enq_bits_winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:275 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~awOut_2_io_enq_bits_anyValid | awOut_2_io_enq_bits_winner_0
              | awOut_2_io_enq_bits_winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~portsAROI_filtered_2_valid | winner_2_0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~awOut_3_io_enq_bits_winner_0 | ~awOut_3_io_enq_bits_winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:275 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~awOut_3_io_enq_bits_anyValid | awOut_3_io_enq_bits_winner_0
              | awOut_3_io_enq_bits_winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~portsAROI_filtered_3_valid | winner_3_0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~((~winner_4_0 | ~winner_4_1) & (~prefixOR_2 | ~winner_4_2)
              & (~(prefixOR_2 | winner_4_2) | ~winner_4_3))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:275 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~anyValid_4 | winner_4_0 | winner_4_1 | winner_4_2 | winner_4_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~((~winner_5_0 | ~winner_5_1) & (~prefixOR_2_1 | ~winner_5_2)
              & (~(prefixOR_2_1 | winner_5_2) | ~winner_5_3))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:275 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~anyValid_5 | winner_5_0 | winner_5_1 | winner_5_2 | winner_5_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~((~winner_6_0 | ~winner_6_1) & (~prefixOR_2_2 | ~winner_6_2)
              & (~(prefixOR_2_2 | winner_6_2) | ~winner_6_3))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:275 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~anyValid_6 | winner_6_0 | winner_6_1 | winner_6_2 | winner_6_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~((~winner_7_0 | ~winner_7_1) & (~prefixOR_2_3 | ~winner_7_2)
              & (~(prefixOR_2_3 | winner_7_2) | ~winner_7_3))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:275 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~anyValid_7 | winner_7_0 | winner_7_1 | winner_7_2 | winner_7_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Xbar.scala:277 assert (!anyValid || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_7_0;
  reg         state_7_1;
  reg         state_7_2;
  reg         state_7_3;
  assign allowed_7_0 = idle_7 ? readys_readys_7[0] : state_7_0;
  assign allowed_7_1 = idle_7 ? readys_readys_7[1] : state_7_1;
  assign allowed_7_2 = idle_7 ? readys_readys_7[2] : state_7_2;
  assign allowed_7_3 = idle_7 ? readys_readys_7[3] : state_7_3;
  assign in_1_b_valid =
    idle_7
      ? anyValid_7
      : state_7_0 & portsBIO_filtered_1_valid | state_7_1 & portsBIO_filtered_1_1_valid
        | state_7_2 & portsBIO_filtered_2_1_valid | state_7_3
        & portsBIO_filtered_3_1_valid;
  assign _in_1_b_bits_T_13 =
    ((idle_7 ? winner_7_0 : state_7_0) ? auto_out_0_b_bits_id[4:0] : 5'h0)
    | ((idle_7 ? winner_7_1 : state_7_1) ? auto_out_1_b_bits_id[4:0] : 5'h0)
    | ((idle_7 ? winner_7_2 : state_7_2) ? auto_out_2_b_bits_id[4:0] : 5'h0)
    | ((idle_7 ? winner_7_3 : state_7_3) ? auto_out_3_b_bits_id[4:0] : 5'h0);
  wire [1:0]  _awOut_0_io_enq_bits_readys_mask_T =
    awOut_0_io_enq_bits_readys_readys & awOut_0_io_enq_bits_readys_valid;
  wire [1:0]  _readys_mask_T = readys_readys & readys_valid;
  wire [1:0]  _awOut_1_io_enq_bits_readys_mask_T =
    awOut_1_io_enq_bits_readys_readys & awOut_1_io_enq_bits_readys_valid;
  wire [1:0]  _readys_mask_T_5 = readys_readys_1 & readys_valid_1;
  wire [1:0]  _awOut_2_io_enq_bits_readys_mask_T =
    awOut_2_io_enq_bits_readys_readys & awOut_2_io_enq_bits_readys_valid;
  wire [1:0]  _readys_mask_T_10 = readys_readys_2 & readys_valid_2;
  wire [1:0]  _awOut_3_io_enq_bits_readys_mask_T =
    awOut_3_io_enq_bits_readys_readys & awOut_3_io_enq_bits_readys_valid;
  wire [1:0]  _readys_mask_T_15 = readys_readys_3 & readys_valid_3;
  wire [3:0]  _readys_mask_T_20 = readys_readys_4 & readys_valid_4;
  wire [3:0]  _readys_mask_T_23 = _readys_mask_T_20 | {_readys_mask_T_20[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_28 = readys_readys_5 & readys_valid_5;
  wire [3:0]  _readys_mask_T_31 = _readys_mask_T_28 | {_readys_mask_T_28[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_36 = readys_readys_6 & readys_valid_6;
  wire [3:0]  _readys_mask_T_39 = _readys_mask_T_36 | {_readys_mask_T_36[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_44 = readys_readys_7 & readys_valid_7;
  wire [3:0]  _readys_mask_T_47 = _readys_mask_T_44 | {_readys_mask_T_44[2:0], 1'h0};
  always @(posedge clock) begin
    if (reset) begin
      arFIFOMap_0_count <= 3'h0;
      awFIFOMap_0_count <= 3'h0;
      arFIFOMap_1_count <= 3'h0;
      awFIFOMap_1_count <= 3'h0;
      arFIFOMap_2_count <= 3'h0;
      awFIFOMap_2_count <= 3'h0;
      arFIFOMap_3_count <= 3'h0;
      awFIFOMap_3_count <= 3'h0;
      arFIFOMap_4_count <= 3'h0;
      awFIFOMap_4_count <= 3'h0;
      arFIFOMap_5_count <= 3'h0;
      awFIFOMap_5_count <= 3'h0;
      arFIFOMap_6_count <= 3'h0;
      awFIFOMap_6_count <= 3'h0;
      arFIFOMap_7_count <= 3'h0;
      awFIFOMap_7_count <= 3'h0;
      arFIFOMap_8_count <= 3'h0;
      awFIFOMap_8_count <= 3'h0;
      arFIFOMap_9_count <= 3'h0;
      awFIFOMap_9_count <= 3'h0;
      arFIFOMap_10_count <= 3'h0;
      awFIFOMap_10_count <= 3'h0;
      arFIFOMap_11_count <= 3'h0;
      awFIFOMap_11_count <= 3'h0;
      arFIFOMap_12_count <= 3'h0;
      awFIFOMap_12_count <= 3'h0;
      arFIFOMap_13_count <= 3'h0;
      awFIFOMap_13_count <= 3'h0;
      arFIFOMap_14_count <= 3'h0;
      awFIFOMap_14_count <= 3'h0;
      arFIFOMap_15_count <= 3'h0;
      awFIFOMap_15_count <= 3'h0;
      latched <= 1'h0;
      awFIFOMap_16_count <= 3'h0;
      awFIFOMap_17_count <= 3'h0;
      awFIFOMap_18_count <= 3'h0;
      awFIFOMap_19_count <= 3'h0;
      awFIFOMap_20_count <= 3'h0;
      awFIFOMap_21_count <= 3'h0;
      awFIFOMap_22_count <= 3'h0;
      awFIFOMap_23_count <= 3'h0;
      awFIFOMap_24_count <= 3'h0;
      awFIFOMap_25_count <= 3'h0;
      awFIFOMap_26_count <= 3'h0;
      awFIFOMap_27_count <= 3'h0;
      awFIFOMap_28_count <= 3'h0;
      awFIFOMap_29_count <= 3'h0;
      awFIFOMap_30_count <= 3'h0;
      awFIFOMap_31_count <= 3'h0;
      awFIFOMap_0_count_1 <= 3'h0;
      awFIFOMap_1_count_1 <= 3'h0;
      awFIFOMap_2_count_1 <= 3'h0;
      awFIFOMap_3_count_1 <= 3'h0;
      awFIFOMap_4_count_1 <= 3'h0;
      awFIFOMap_5_count_1 <= 3'h0;
      awFIFOMap_6_count_1 <= 3'h0;
      awFIFOMap_7_count_1 <= 3'h0;
      awFIFOMap_8_count_1 <= 3'h0;
      awFIFOMap_9_count_1 <= 3'h0;
      awFIFOMap_10_count_1 <= 3'h0;
      awFIFOMap_11_count_1 <= 3'h0;
      awFIFOMap_12_count_1 <= 3'h0;
      awFIFOMap_13_count_1 <= 3'h0;
      awFIFOMap_14_count_1 <= 3'h0;
      awFIFOMap_15_count_1 <= 3'h0;
      latched_1 <= 1'h0;
      latched_2 <= 1'h0;
      latched_3 <= 1'h0;
      latched_4 <= 1'h0;
      latched_5 <= 1'h0;
      awOut_0_io_enq_bits_idle <= 1'h1;
      awOut_0_io_enq_bits_readys_mask <= 2'h3;
      awOut_0_io_enq_bits_state_0 <= 1'h0;
      awOut_0_io_enq_bits_state_1 <= 1'h0;
      idle <= 1'h1;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      awOut_1_io_enq_bits_idle <= 1'h1;
      awOut_1_io_enq_bits_readys_mask <= 2'h3;
      awOut_1_io_enq_bits_state_0 <= 1'h0;
      awOut_1_io_enq_bits_state_1 <= 1'h0;
      idle_1 <= 1'h1;
      readys_mask_1 <= 2'h3;
      state_1_0 <= 1'h0;
      awOut_2_io_enq_bits_idle <= 1'h1;
      awOut_2_io_enq_bits_readys_mask <= 2'h3;
      awOut_2_io_enq_bits_state_0 <= 1'h0;
      awOut_2_io_enq_bits_state_1 <= 1'h0;
      idle_2 <= 1'h1;
      readys_mask_2 <= 2'h3;
      state_2_0 <= 1'h0;
      awOut_3_io_enq_bits_idle <= 1'h1;
      awOut_3_io_enq_bits_readys_mask <= 2'h3;
      awOut_3_io_enq_bits_state_0 <= 1'h0;
      awOut_3_io_enq_bits_state_1 <= 1'h0;
      idle_3 <= 1'h1;
      readys_mask_3 <= 2'h3;
      state_3_0 <= 1'h0;
      idle_4 <= 1'h1;
      readys_mask_4 <= 4'hF;
      state_4_0 <= 1'h0;
      state_4_1 <= 1'h0;
      state_4_2 <= 1'h0;
      state_4_3 <= 1'h0;
      idle_5 <= 1'h1;
      readys_mask_5 <= 4'hF;
      state_5_0 <= 1'h0;
      state_5_1 <= 1'h0;
      state_5_2 <= 1'h0;
      state_5_3 <= 1'h0;
      idle_6 <= 1'h1;
      readys_mask_6 <= 4'hF;
      state_6_0 <= 1'h0;
      state_6_1 <= 1'h0;
      state_6_2 <= 1'h0;
      state_6_3 <= 1'h0;
      idle_7 <= 1'h1;
      readys_mask_7 <= 4'hF;
      state_7_0 <= 1'h0;
      state_7_1 <= 1'h0;
      state_7_2 <= 1'h0;
      state_7_3 <= 1'h0;
    end
    else begin
      arFIFOMap_0_count <=
        3'(3'(arFIFOMap_0_count + {2'h0, _arFIFOMap_0_T_2}) - {2'h0, _arFIFOMap_0_T_6});
      awFIFOMap_0_count <= 3'(awFIFOMap_0_count - {2'h0, _awFIFOMap_0_T_5});
      arFIFOMap_1_count <=
        3'(3'(arFIFOMap_1_count + {2'h0, _arFIFOMap_1_T_2}) - {2'h0, _arFIFOMap_1_T_6});
      awFIFOMap_1_count <= 3'(awFIFOMap_1_count - {2'h0, _awFIFOMap_1_T_5});
      arFIFOMap_2_count <=
        3'(3'(arFIFOMap_2_count + {2'h0, _arFIFOMap_2_T_2}) - {2'h0, _arFIFOMap_2_T_6});
      awFIFOMap_2_count <= 3'(awFIFOMap_2_count - {2'h0, _awFIFOMap_2_T_5});
      arFIFOMap_3_count <=
        3'(3'(arFIFOMap_3_count + {2'h0, _arFIFOMap_3_T_2}) - {2'h0, _arFIFOMap_3_T_6});
      awFIFOMap_3_count <= 3'(awFIFOMap_3_count - {2'h0, _awFIFOMap_3_T_5});
      arFIFOMap_4_count <=
        3'(3'(arFIFOMap_4_count + {2'h0, _arFIFOMap_4_T_2}) - {2'h0, _arFIFOMap_4_T_6});
      awFIFOMap_4_count <= 3'(awFIFOMap_4_count - {2'h0, _awFIFOMap_4_T_5});
      arFIFOMap_5_count <=
        3'(3'(arFIFOMap_5_count + {2'h0, _arFIFOMap_5_T_2}) - {2'h0, _arFIFOMap_5_T_6});
      awFIFOMap_5_count <= 3'(awFIFOMap_5_count - {2'h0, _awFIFOMap_5_T_5});
      arFIFOMap_6_count <=
        3'(3'(arFIFOMap_6_count + {2'h0, _arFIFOMap_6_T_2}) - {2'h0, _arFIFOMap_6_T_6});
      awFIFOMap_6_count <= 3'(awFIFOMap_6_count - {2'h0, _awFIFOMap_6_T_5});
      arFIFOMap_7_count <=
        3'(3'(arFIFOMap_7_count + {2'h0, _arFIFOMap_7_T_2}) - {2'h0, _arFIFOMap_7_T_6});
      awFIFOMap_7_count <= 3'(awFIFOMap_7_count - {2'h0, _awFIFOMap_7_T_5});
      arFIFOMap_8_count <=
        3'(3'(arFIFOMap_8_count + {2'h0, _arFIFOMap_8_T_2}) - {2'h0, _arFIFOMap_8_T_6});
      awFIFOMap_8_count <= 3'(awFIFOMap_8_count - {2'h0, _awFIFOMap_8_T_5});
      arFIFOMap_9_count <=
        3'(3'(arFIFOMap_9_count + {2'h0, _arFIFOMap_9_T_2}) - {2'h0, _arFIFOMap_9_T_6});
      awFIFOMap_9_count <= 3'(awFIFOMap_9_count - {2'h0, _awFIFOMap_9_T_5});
      arFIFOMap_10_count <=
        3'(3'(arFIFOMap_10_count + {2'h0, _arFIFOMap_10_T_2})
           - {2'h0, _arFIFOMap_10_T_6});
      awFIFOMap_10_count <= 3'(awFIFOMap_10_count - {2'h0, _awFIFOMap_10_T_5});
      arFIFOMap_11_count <=
        3'(3'(arFIFOMap_11_count + {2'h0, _arFIFOMap_11_T_2})
           - {2'h0, _arFIFOMap_11_T_6});
      awFIFOMap_11_count <= 3'(awFIFOMap_11_count - {2'h0, _awFIFOMap_11_T_5});
      arFIFOMap_12_count <=
        3'(3'(arFIFOMap_12_count + {2'h0, _arFIFOMap_12_T_2})
           - {2'h0, _arFIFOMap_12_T_6});
      awFIFOMap_12_count <= 3'(awFIFOMap_12_count - {2'h0, _awFIFOMap_12_T_5});
      arFIFOMap_13_count <=
        3'(3'(arFIFOMap_13_count + {2'h0, _arFIFOMap_13_T_2})
           - {2'h0, _arFIFOMap_13_T_6});
      awFIFOMap_13_count <= 3'(awFIFOMap_13_count - {2'h0, _awFIFOMap_13_T_5});
      arFIFOMap_14_count <=
        3'(3'(arFIFOMap_14_count + {2'h0, _arFIFOMap_14_T_2})
           - {2'h0, _arFIFOMap_14_T_6});
      awFIFOMap_14_count <= 3'(awFIFOMap_14_count - {2'h0, _awFIFOMap_14_T_5});
      arFIFOMap_15_count <=
        3'(3'(arFIFOMap_15_count + {2'h0, _arFIFOMap_15_T_2})
           - {2'h0, _arFIFOMap_15_T_6});
      awFIFOMap_15_count <= 3'(awFIFOMap_15_count - {2'h0, _awFIFOMap_15_T_5});
      latched <= _awIn_0_io_enq_ready & _awIn_0_io_enq_valid_T_1 | latched;
      awFIFOMap_16_count <= 3'(awFIFOMap_16_count - {2'h0, _awFIFOMap_16_T_5});
      awFIFOMap_17_count <= 3'(awFIFOMap_17_count - {2'h0, _awFIFOMap_17_T_5});
      awFIFOMap_18_count <= 3'(awFIFOMap_18_count - {2'h0, _awFIFOMap_18_T_5});
      awFIFOMap_19_count <= 3'(awFIFOMap_19_count - {2'h0, _awFIFOMap_19_T_5});
      awFIFOMap_20_count <= 3'(awFIFOMap_20_count - {2'h0, _awFIFOMap_20_T_5});
      awFIFOMap_21_count <= 3'(awFIFOMap_21_count - {2'h0, _awFIFOMap_21_T_5});
      awFIFOMap_22_count <= 3'(awFIFOMap_22_count - {2'h0, _awFIFOMap_22_T_5});
      awFIFOMap_23_count <= 3'(awFIFOMap_23_count - {2'h0, _awFIFOMap_23_T_5});
      awFIFOMap_24_count <= 3'(awFIFOMap_24_count - {2'h0, _awFIFOMap_24_T_5});
      awFIFOMap_25_count <= 3'(awFIFOMap_25_count - {2'h0, _awFIFOMap_25_T_5});
      awFIFOMap_26_count <= 3'(awFIFOMap_26_count - {2'h0, _awFIFOMap_26_T_5});
      awFIFOMap_27_count <= 3'(awFIFOMap_27_count - {2'h0, _awFIFOMap_27_T_5});
      awFIFOMap_28_count <= 3'(awFIFOMap_28_count - {2'h0, _awFIFOMap_28_T_5});
      awFIFOMap_29_count <= 3'(awFIFOMap_29_count - {2'h0, _awFIFOMap_29_T_5});
      awFIFOMap_30_count <= 3'(awFIFOMap_30_count - {2'h0, _awFIFOMap_30_T_5});
      awFIFOMap_31_count <= 3'(awFIFOMap_31_count - {2'h0, _awFIFOMap_31_T_5});
      awFIFOMap_0_count_1 <= 3'(awFIFOMap_0_count_1 - {2'h0, _awFIFOMap_0_T_28});
      awFIFOMap_1_count_1 <= 3'(awFIFOMap_1_count_1 - {2'h0, _awFIFOMap_1_T_28});
      awFIFOMap_2_count_1 <= 3'(awFIFOMap_2_count_1 - {2'h0, _awFIFOMap_2_T_28});
      awFIFOMap_3_count_1 <= 3'(awFIFOMap_3_count_1 - {2'h0, _awFIFOMap_3_T_28});
      awFIFOMap_4_count_1 <= 3'(awFIFOMap_4_count_1 - {2'h0, _awFIFOMap_4_T_28});
      awFIFOMap_5_count_1 <= 3'(awFIFOMap_5_count_1 - {2'h0, _awFIFOMap_5_T_28});
      awFIFOMap_6_count_1 <= 3'(awFIFOMap_6_count_1 - {2'h0, _awFIFOMap_6_T_28});
      awFIFOMap_7_count_1 <= 3'(awFIFOMap_7_count_1 - {2'h0, _awFIFOMap_7_T_28});
      awFIFOMap_8_count_1 <= 3'(awFIFOMap_8_count_1 - {2'h0, _awFIFOMap_8_T_28});
      awFIFOMap_9_count_1 <= 3'(awFIFOMap_9_count_1 - {2'h0, _awFIFOMap_9_T_28});
      awFIFOMap_10_count_1 <= 3'(awFIFOMap_10_count_1 - {2'h0, _awFIFOMap_10_T_28});
      awFIFOMap_11_count_1 <= 3'(awFIFOMap_11_count_1 - {2'h0, _awFIFOMap_11_T_28});
      awFIFOMap_12_count_1 <= 3'(awFIFOMap_12_count_1 - {2'h0, _awFIFOMap_12_T_28});
      awFIFOMap_13_count_1 <= 3'(awFIFOMap_13_count_1 - {2'h0, _awFIFOMap_13_T_28});
      awFIFOMap_14_count_1 <= 3'(awFIFOMap_14_count_1 - {2'h0, _awFIFOMap_14_T_28});
      awFIFOMap_15_count_1 <= 3'(awFIFOMap_15_count_1 - {2'h0, _awFIFOMap_15_T_28});
      latched_1 <= _awIn_1_io_enq_ready & _awIn_1_io_enq_valid_T_1 | latched_1;
      latched_2 <= _awOut_0_io_enq_ready & _awOut_0_io_enq_valid_T_1 | latched_2;
      latched_3 <= _awOut_1_io_enq_ready & _awOut_1_io_enq_valid_T_1 | latched_3;
      latched_4 <= _awOut_2_io_enq_ready & _awOut_2_io_enq_valid_T_1 | latched_4;
      latched_5 <= _awOut_3_io_enq_ready & _awOut_3_io_enq_valid_T_1 | latched_5;
      awOut_0_io_enq_bits_idle <=
        ~awOut_0_io_enq_bits_anyValid & awOut_0_io_enq_bits_idle;
      if (awOut_0_io_enq_bits_idle & (|awOut_0_io_enq_bits_readys_valid))
        awOut_0_io_enq_bits_readys_mask <=
          _awOut_0_io_enq_bits_readys_mask_T
          | {_awOut_0_io_enq_bits_readys_mask_T[0], 1'h0};
      if (awOut_0_io_enq_bits_idle) begin
        awOut_0_io_enq_bits_state_0 <= awOut_0_io_enq_bits_winner_0;
        awOut_0_io_enq_bits_state_1 <= awOut_0_io_enq_bits_winner_1;
      end
      idle <= auto_out_0_ar_ready & out_0_ar_valid | ~portsAROI_filtered_0_valid & idle;
      if (idle & portsAROI_filtered_0_valid)
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      if (idle)
        state_0 <= winner_0;
      awOut_1_io_enq_bits_idle <=
        ~awOut_1_io_enq_bits_anyValid & awOut_1_io_enq_bits_idle;
      if (awOut_1_io_enq_bits_idle & (|awOut_1_io_enq_bits_readys_valid))
        awOut_1_io_enq_bits_readys_mask <=
          _awOut_1_io_enq_bits_readys_mask_T
          | {_awOut_1_io_enq_bits_readys_mask_T[0], 1'h0};
      if (awOut_1_io_enq_bits_idle) begin
        awOut_1_io_enq_bits_state_0 <= awOut_1_io_enq_bits_winner_0;
        awOut_1_io_enq_bits_state_1 <= awOut_1_io_enq_bits_winner_1;
      end
      idle_1 <=
        auto_out_1_ar_ready & out_1_ar_valid | ~portsAROI_filtered_1_valid & idle_1;
      if (idle_1 & portsAROI_filtered_1_valid)
        readys_mask_1 <= _readys_mask_T_5 | {_readys_mask_T_5[0], 1'h0};
      if (idle_1)
        state_1_0 <= winner_1_0;
      awOut_2_io_enq_bits_idle <=
        ~awOut_2_io_enq_bits_anyValid & awOut_2_io_enq_bits_idle;
      if (awOut_2_io_enq_bits_idle & (|awOut_2_io_enq_bits_readys_valid))
        awOut_2_io_enq_bits_readys_mask <=
          _awOut_2_io_enq_bits_readys_mask_T
          | {_awOut_2_io_enq_bits_readys_mask_T[0], 1'h0};
      if (awOut_2_io_enq_bits_idle) begin
        awOut_2_io_enq_bits_state_0 <= awOut_2_io_enq_bits_winner_0;
        awOut_2_io_enq_bits_state_1 <= awOut_2_io_enq_bits_winner_1;
      end
      idle_2 <=
        auto_out_2_ar_ready & out_2_ar_valid | ~portsAROI_filtered_2_valid & idle_2;
      if (idle_2 & portsAROI_filtered_2_valid)
        readys_mask_2 <= _readys_mask_T_10 | {_readys_mask_T_10[0], 1'h0};
      if (idle_2)
        state_2_0 <= winner_2_0;
      awOut_3_io_enq_bits_idle <=
        ~awOut_3_io_enq_bits_anyValid & awOut_3_io_enq_bits_idle;
      if (awOut_3_io_enq_bits_idle & (|awOut_3_io_enq_bits_readys_valid))
        awOut_3_io_enq_bits_readys_mask <=
          _awOut_3_io_enq_bits_readys_mask_T
          | {_awOut_3_io_enq_bits_readys_mask_T[0], 1'h0};
      if (awOut_3_io_enq_bits_idle) begin
        awOut_3_io_enq_bits_state_0 <= awOut_3_io_enq_bits_winner_0;
        awOut_3_io_enq_bits_state_1 <= awOut_3_io_enq_bits_winner_1;
      end
      idle_3 <=
        auto_out_3_ar_ready & out_3_ar_valid | ~portsAROI_filtered_3_valid & idle_3;
      if (idle_3 & portsAROI_filtered_3_valid)
        readys_mask_3 <= _readys_mask_T_15 | {_readys_mask_T_15[0], 1'h0};
      if (idle_3)
        state_3_0 <= winner_3_0;
      idle_4 <= auto_in_0_r_ready & in_0_r_valid | ~anyValid_4 & idle_4;
      if (idle_4 & (|readys_valid_4))
        readys_mask_4 <= _readys_mask_T_23 | {_readys_mask_T_23[1:0], 2'h0};
      if (idle_4) begin
        state_4_0 <= winner_4_0;
        state_4_1 <= winner_4_1;
        state_4_2 <= winner_4_2;
        state_4_3 <= winner_4_3;
      end
      idle_5 <= auto_in_0_b_ready & in_0_b_valid | ~anyValid_5 & idle_5;
      if (idle_5 & (|readys_valid_5))
        readys_mask_5 <= _readys_mask_T_31 | {_readys_mask_T_31[1:0], 2'h0};
      if (idle_5) begin
        state_5_0 <= winner_5_0;
        state_5_1 <= winner_5_1;
        state_5_2 <= winner_5_2;
        state_5_3 <= winner_5_3;
      end
      idle_6 <= ~anyValid_6 & idle_6;
      if (idle_6 & (|readys_valid_6))
        readys_mask_6 <= _readys_mask_T_39 | {_readys_mask_T_39[1:0], 2'h0};
      if (idle_6) begin
        state_6_0 <= winner_6_0;
        state_6_1 <= winner_6_1;
        state_6_2 <= winner_6_2;
        state_6_3 <= winner_6_3;
      end
      idle_7 <= auto_in_1_b_ready & in_1_b_valid | ~anyValid_7 & idle_7;
      if (idle_7 & (|readys_valid_7))
        readys_mask_7 <= _readys_mask_T_47 | {_readys_mask_T_47[1:0], 2'h0};
      if (idle_7) begin
        state_7_0 <= winner_7_0;
        state_7_1 <= winner_7_1;
        state_7_2 <= winner_7_2;
        state_7_3 <= winner_7_3;
      end
    end
    if (_arFIFOMap_0_T_2)
      arFIFOMap_0_last <= arTag;
    if (_arFIFOMap_1_T_2)
      arFIFOMap_1_last <= arTag;
    if (_arFIFOMap_2_T_2)
      arFIFOMap_2_last <= arTag;
    if (_arFIFOMap_3_T_2)
      arFIFOMap_3_last <= arTag;
    if (_arFIFOMap_4_T_2)
      arFIFOMap_4_last <= arTag;
    if (_arFIFOMap_5_T_2)
      arFIFOMap_5_last <= arTag;
    if (_arFIFOMap_6_T_2)
      arFIFOMap_6_last <= arTag;
    if (_arFIFOMap_7_T_2)
      arFIFOMap_7_last <= arTag;
    if (_arFIFOMap_8_T_2)
      arFIFOMap_8_last <= arTag;
    if (_arFIFOMap_9_T_2)
      arFIFOMap_9_last <= arTag;
    if (_arFIFOMap_10_T_2)
      arFIFOMap_10_last <= arTag;
    if (_arFIFOMap_11_T_2)
      arFIFOMap_11_last <= arTag;
    if (_arFIFOMap_12_T_2)
      arFIFOMap_12_last <= arTag;
    if (_arFIFOMap_13_T_2)
      arFIFOMap_13_last <= arTag;
    if (_arFIFOMap_14_T_2)
      arFIFOMap_14_last <= arTag;
    if (_arFIFOMap_15_T_2)
      arFIFOMap_15_last <= arTag;
  end // always @(posedge)
  Queue2_UInt4 awIn_0 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awIn_0_io_enq_ready),
    .io_enq_valid (_awIn_0_io_enq_valid_T_1),
    .io_enq_bits  ({requestAWIO_0_3, requestAWIO_0_2, requestAWIO_0_1, requestAWIO_0_0}),
    .io_deq_valid (_awIn_0_io_deq_valid),
    .io_deq_bits  (_awIn_0_io_deq_bits)
  );
  Queue2_UInt4 awIn_1 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awIn_1_io_enq_ready),
    .io_enq_valid (_awIn_1_io_enq_valid_T_1),
    .io_enq_bits  ({requestAWIO_1_3, requestAWIO_1_2, requestAWIO_1_1, requestAWIO_1_0}),
    .io_deq_valid (_awIn_1_io_deq_valid),
    .io_deq_bits  (_awIn_1_io_deq_bits)
  );
  Queue2_UInt2 awOut_0 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awOut_0_io_enq_ready),
    .io_enq_valid (_awOut_0_io_enq_valid_T_1),
    .io_enq_bits  ({awOut_0_io_enq_bits_muxState_1, awOut_0_io_enq_bits_muxState_0}),
    .io_deq_ready (1'h0),
    .io_deq_valid (_awOut_0_io_deq_valid),
    .io_deq_bits  (_awOut_0_io_deq_bits)
  );
  Queue2_UInt2 awOut_1 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awOut_1_io_enq_ready),
    .io_enq_valid (_awOut_1_io_enq_valid_T_1),
    .io_enq_bits  ({awOut_1_io_enq_bits_muxState_1, awOut_1_io_enq_bits_muxState_0}),
    .io_deq_ready (1'h0),
    .io_deq_valid (_awOut_1_io_deq_valid),
    .io_deq_bits  (_awOut_1_io_deq_bits)
  );
  Queue2_UInt2 awOut_2 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awOut_2_io_enq_ready),
    .io_enq_valid (_awOut_2_io_enq_valid_T_1),
    .io_enq_bits  ({awOut_2_io_enq_bits_muxState_1, awOut_2_io_enq_bits_muxState_0}),
    .io_deq_ready (1'h0),
    .io_deq_valid (_awOut_2_io_deq_valid),
    .io_deq_bits  (_awOut_2_io_deq_bits)
  );
  Queue2_UInt2 awOut_3 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awOut_3_io_enq_ready),
    .io_enq_valid (_awOut_3_io_enq_valid_T_1),
    .io_enq_bits  ({awOut_3_io_enq_bits_muxState_1, awOut_3_io_enq_bits_muxState_0}),
    .io_deq_ready (1'h0),
    .io_deq_valid (_awOut_3_io_deq_valid),
    .io_deq_bits  (_awOut_3_io_deq_bits)
  );
  assign auto_in_1_b_valid = in_1_b_valid;
  assign auto_in_1_b_bits_id = _in_1_b_bits_T_13;
  assign auto_in_1_r_valid =
    idle_6
      ? anyValid_6
      : state_6_0 & portsRIO_filtered_1_valid | state_6_1 & portsRIO_filtered_1_1_valid
        | state_6_2 & portsRIO_filtered_2_1_valid | state_6_3
        & portsRIO_filtered_3_1_valid;
  assign auto_in_1_r_bits_id =
    ((idle_6 ? winner_6_0 : state_6_0) ? auto_out_0_r_bits_id[4:0] : 5'h0)
    | ((idle_6 ? winner_6_1 : state_6_1) ? auto_out_1_r_bits_id[4:0] : 5'h0)
    | ((idle_6 ? winner_6_2 : state_6_2) ? auto_out_2_r_bits_id[4:0] : 5'h0)
    | ((idle_6 ? winner_6_3 : state_6_3) ? auto_out_3_r_bits_id[4:0] : 5'h0);
  assign auto_in_0_b_valid = in_0_b_valid;
  assign auto_in_0_b_bits_id = _in_0_b_bits_T_13;
  assign auto_in_0_b_bits_resp =
    (muxState_5_0 ? auto_out_0_b_bits_resp : 2'h0)
    | (muxState_5_1 ? auto_out_1_b_bits_resp : 2'h0)
    | (muxState_5_2 ? auto_out_2_b_bits_resp : 2'h0)
    | (muxState_5_3 ? auto_out_3_b_bits_resp : 2'h0);
  assign auto_in_0_ar_ready = nodeIn_ar_ready;
  assign auto_in_0_r_valid = in_0_r_valid;
  assign auto_in_0_r_bits_id = _in_0_r_bits_T_27;
  assign auto_in_0_r_bits_data =
    (muxState_4_0 ? auto_out_0_r_bits_data : 32'h0)
    | (muxState_4_1 ? auto_out_1_r_bits_data : 32'h0)
    | (muxState_4_2 ? auto_out_2_r_bits_data : 32'h0)
    | (muxState_4_3 ? auto_out_3_r_bits_data : 32'h0);
  assign auto_in_0_r_bits_resp =
    (muxState_4_0 ? auto_out_0_r_bits_resp : 2'h0)
    | (muxState_4_1 ? auto_out_1_r_bits_resp : 2'h0)
    | (muxState_4_2 ? auto_out_2_r_bits_resp : 2'h0)
    | (muxState_4_3 ? auto_out_3_r_bits_resp : 2'h0);
  assign auto_in_0_r_bits_last = _in_0_r_bits_T_6;
  assign auto_out_3_aw_valid = out_3_aw_valid & (latched_5 | _awOut_3_io_enq_ready);
  assign auto_out_3_aw_bits_id =
    (awOut_3_io_enq_bits_muxState_0 ? in_0_aw_bits_id : 6'h0)
    | (awOut_3_io_enq_bits_muxState_1 ? in_1_aw_bits_id : 6'h0);
  assign auto_out_3_aw_bits_addr =
    (awOut_3_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_addr : 32'h0)
    | (awOut_3_io_enq_bits_muxState_1 ? auto_in_1_aw_bits_addr : 32'h0);
  assign auto_out_3_aw_bits_len =
    awOut_3_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_len : 8'h0;
  assign auto_out_3_aw_bits_size =
    (awOut_3_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_size : 3'h0)
    | (awOut_3_io_enq_bits_muxState_1 ? auto_in_1_aw_bits_size : 3'h0);
  assign auto_out_3_aw_bits_burst =
    awOut_3_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_burst : 2'h0;
  assign auto_out_3_aw_bits_lock =
    awOut_3_io_enq_bits_muxState_0 & auto_in_0_aw_bits_lock;
  assign auto_out_3_aw_bits_cache =
    awOut_3_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_cache : 4'h0;
  assign auto_out_3_aw_bits_prot =
    awOut_3_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_prot : 3'h0;
  assign auto_out_3_aw_bits_qos =
    awOut_3_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_qos : 4'h0;
  assign auto_out_3_w_valid = _out_3_w_valid_T_4 & _awOut_3_io_deq_valid;
  assign auto_out_3_w_bits_data =
    (_awOut_3_io_deq_bits[0] ? auto_in_0_w_bits_data : 32'h0)
    | (_awOut_3_io_deq_bits[1] ? auto_in_1_w_bits_data : 32'h0);
  assign auto_out_3_w_bits_strb =
    (_awOut_3_io_deq_bits[0] ? auto_in_0_w_bits_strb : 4'h0)
    | (_awOut_3_io_deq_bits[1] ? auto_in_1_w_bits_strb : 4'h0);
  assign auto_out_3_w_bits_last =
    _awOut_3_io_deq_bits[0] & auto_in_0_w_bits_last | _awOut_3_io_deq_bits[1]
    & auto_in_1_w_bits_last;
  assign auto_out_3_b_ready =
    requestBOI_3_0 & auto_in_0_b_ready & allowed_5_3 | ~(auto_out_3_b_bits_id[5])
    & auto_in_1_b_ready & allowed_7_3;
  assign auto_out_3_ar_valid = out_3_ar_valid;
  assign auto_out_3_ar_bits_id = muxState_3_0 ? in_0_ar_bits_id : 6'h0;
  assign auto_out_3_ar_bits_addr = muxState_3_0 ? auto_in_0_ar_bits_addr : 32'h0;
  assign auto_out_3_ar_bits_len = muxState_3_0 ? auto_in_0_ar_bits_len : 8'h0;
  assign auto_out_3_ar_bits_size = muxState_3_0 ? auto_in_0_ar_bits_size : 3'h0;
  assign auto_out_3_ar_bits_burst = muxState_3_0 ? auto_in_0_ar_bits_burst : 2'h0;
  assign auto_out_3_ar_bits_lock = muxState_3_0 & auto_in_0_ar_bits_lock;
  assign auto_out_3_ar_bits_cache = muxState_3_0 ? auto_in_0_ar_bits_cache : 4'h0;
  assign auto_out_3_ar_bits_prot = muxState_3_0 ? auto_in_0_ar_bits_prot : 3'h0;
  assign auto_out_3_ar_bits_qos = muxState_3_0 ? auto_in_0_ar_bits_qos : 4'h0;
  assign auto_out_3_r_ready = requestROI_3_0 & auto_in_0_r_ready & allowed_4_3;
  assign auto_out_2_aw_valid = out_2_aw_valid & (latched_4 | _awOut_2_io_enq_ready);
  assign auto_out_2_aw_bits_id =
    (awOut_2_io_enq_bits_muxState_0 ? in_0_aw_bits_id : 6'h0)
    | (awOut_2_io_enq_bits_muxState_1 ? in_1_aw_bits_id : 6'h0);
  assign auto_out_2_aw_bits_addr =
    (awOut_2_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_addr : 32'h0)
    | (awOut_2_io_enq_bits_muxState_1 ? auto_in_1_aw_bits_addr : 32'h0);
  assign auto_out_2_aw_bits_len =
    awOut_2_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_len : 8'h0;
  assign auto_out_2_aw_bits_size =
    (awOut_2_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_size : 3'h0)
    | (awOut_2_io_enq_bits_muxState_1 ? auto_in_1_aw_bits_size : 3'h0);
  assign auto_out_2_aw_bits_burst =
    awOut_2_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_burst : 2'h0;
  assign auto_out_2_aw_bits_lock =
    awOut_2_io_enq_bits_muxState_0 & auto_in_0_aw_bits_lock;
  assign auto_out_2_aw_bits_cache =
    awOut_2_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_cache : 4'h0;
  assign auto_out_2_aw_bits_prot =
    awOut_2_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_prot : 3'h0;
  assign auto_out_2_aw_bits_qos =
    awOut_2_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_qos : 4'h0;
  assign auto_out_2_w_valid = _out_2_w_valid_T_4 & _awOut_2_io_deq_valid;
  assign auto_out_2_w_bits_data =
    (_awOut_2_io_deq_bits[0] ? auto_in_0_w_bits_data : 32'h0)
    | (_awOut_2_io_deq_bits[1] ? auto_in_1_w_bits_data : 32'h0);
  assign auto_out_2_w_bits_strb =
    (_awOut_2_io_deq_bits[0] ? auto_in_0_w_bits_strb : 4'h0)
    | (_awOut_2_io_deq_bits[1] ? auto_in_1_w_bits_strb : 4'h0);
  assign auto_out_2_w_bits_last =
    _awOut_2_io_deq_bits[0] & auto_in_0_w_bits_last | _awOut_2_io_deq_bits[1]
    & auto_in_1_w_bits_last;
  assign auto_out_2_b_ready =
    requestBOI_2_0 & auto_in_0_b_ready & allowed_5_2 | ~(auto_out_2_b_bits_id[5])
    & auto_in_1_b_ready & allowed_7_2;
  assign auto_out_2_ar_valid = out_2_ar_valid;
  assign auto_out_2_ar_bits_id = muxState_2_0 ? in_0_ar_bits_id : 6'h0;
  assign auto_out_2_ar_bits_addr = muxState_2_0 ? auto_in_0_ar_bits_addr : 32'h0;
  assign auto_out_2_ar_bits_len = muxState_2_0 ? auto_in_0_ar_bits_len : 8'h0;
  assign auto_out_2_ar_bits_size = muxState_2_0 ? auto_in_0_ar_bits_size : 3'h0;
  assign auto_out_2_ar_bits_burst = muxState_2_0 ? auto_in_0_ar_bits_burst : 2'h0;
  assign auto_out_2_ar_bits_lock = muxState_2_0 & auto_in_0_ar_bits_lock;
  assign auto_out_2_ar_bits_cache = muxState_2_0 ? auto_in_0_ar_bits_cache : 4'h0;
  assign auto_out_2_ar_bits_prot = muxState_2_0 ? auto_in_0_ar_bits_prot : 3'h0;
  assign auto_out_2_ar_bits_qos = muxState_2_0 ? auto_in_0_ar_bits_qos : 4'h0;
  assign auto_out_2_r_ready = requestROI_2_0 & auto_in_0_r_ready & allowed_4_2;
  assign auto_out_1_aw_valid = out_1_aw_valid & (latched_3 | _awOut_1_io_enq_ready);
  assign auto_out_1_aw_bits_id =
    (awOut_1_io_enq_bits_muxState_0 ? in_0_aw_bits_id : 6'h0)
    | (awOut_1_io_enq_bits_muxState_1 ? in_1_aw_bits_id : 6'h0);
  assign auto_out_1_aw_bits_addr =
    (awOut_1_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_addr : 32'h0)
    | (awOut_1_io_enq_bits_muxState_1 ? auto_in_1_aw_bits_addr : 32'h0);
  assign auto_out_1_aw_bits_len =
    awOut_1_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_len : 8'h0;
  assign auto_out_1_aw_bits_size =
    (awOut_1_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_size : 3'h0)
    | (awOut_1_io_enq_bits_muxState_1 ? auto_in_1_aw_bits_size : 3'h0);
  assign auto_out_1_aw_bits_burst =
    awOut_1_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_burst : 2'h0;
  assign auto_out_1_aw_bits_lock =
    awOut_1_io_enq_bits_muxState_0 & auto_in_0_aw_bits_lock;
  assign auto_out_1_aw_bits_cache =
    awOut_1_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_cache : 4'h0;
  assign auto_out_1_aw_bits_prot =
    awOut_1_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_prot : 3'h0;
  assign auto_out_1_aw_bits_qos =
    awOut_1_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_qos : 4'h0;
  assign auto_out_1_w_valid = _out_1_w_valid_T_4 & _awOut_1_io_deq_valid;
  assign auto_out_1_w_bits_data =
    (_awOut_1_io_deq_bits[0] ? auto_in_0_w_bits_data : 32'h0)
    | (_awOut_1_io_deq_bits[1] ? auto_in_1_w_bits_data : 32'h0);
  assign auto_out_1_w_bits_strb =
    (_awOut_1_io_deq_bits[0] ? auto_in_0_w_bits_strb : 4'h0)
    | (_awOut_1_io_deq_bits[1] ? auto_in_1_w_bits_strb : 4'h0);
  assign auto_out_1_w_bits_last =
    _awOut_1_io_deq_bits[0] & auto_in_0_w_bits_last | _awOut_1_io_deq_bits[1]
    & auto_in_1_w_bits_last;
  assign auto_out_1_b_ready =
    requestBOI_1_0 & auto_in_0_b_ready & allowed_5_1 | ~(auto_out_1_b_bits_id[5])
    & auto_in_1_b_ready & allowed_7_1;
  assign auto_out_1_ar_valid = out_1_ar_valid;
  assign auto_out_1_ar_bits_id = muxState_1_0 ? in_0_ar_bits_id : 6'h0;
  assign auto_out_1_ar_bits_addr = muxState_1_0 ? auto_in_0_ar_bits_addr : 32'h0;
  assign auto_out_1_ar_bits_len = muxState_1_0 ? auto_in_0_ar_bits_len : 8'h0;
  assign auto_out_1_ar_bits_size = muxState_1_0 ? auto_in_0_ar_bits_size : 3'h0;
  assign auto_out_1_ar_bits_burst = muxState_1_0 ? auto_in_0_ar_bits_burst : 2'h0;
  assign auto_out_1_ar_bits_lock = muxState_1_0 & auto_in_0_ar_bits_lock;
  assign auto_out_1_ar_bits_cache = muxState_1_0 ? auto_in_0_ar_bits_cache : 4'h0;
  assign auto_out_1_ar_bits_prot = muxState_1_0 ? auto_in_0_ar_bits_prot : 3'h0;
  assign auto_out_1_ar_bits_qos = muxState_1_0 ? auto_in_0_ar_bits_qos : 4'h0;
  assign auto_out_1_r_ready = requestROI_1_0 & auto_in_0_r_ready & allowed_4_1;
  assign auto_out_0_aw_valid = out_0_aw_valid & (latched_2 | _awOut_0_io_enq_ready);
  assign auto_out_0_aw_bits_id =
    (awOut_0_io_enq_bits_muxState_0 ? in_0_aw_bits_id : 6'h0)
    | (awOut_0_io_enq_bits_muxState_1 ? in_1_aw_bits_id : 6'h0);
  assign auto_out_0_aw_bits_addr =
    (awOut_0_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_addr : 32'h0)
    | (awOut_0_io_enq_bits_muxState_1 ? auto_in_1_aw_bits_addr : 32'h0);
  assign auto_out_0_aw_bits_len =
    awOut_0_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_len : 8'h0;
  assign auto_out_0_aw_bits_size =
    (awOut_0_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_size : 3'h0)
    | (awOut_0_io_enq_bits_muxState_1 ? auto_in_1_aw_bits_size : 3'h0);
  assign auto_out_0_aw_bits_burst =
    awOut_0_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_burst : 2'h0;
  assign auto_out_0_aw_bits_lock =
    awOut_0_io_enq_bits_muxState_0 & auto_in_0_aw_bits_lock;
  assign auto_out_0_aw_bits_cache =
    awOut_0_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_cache : 4'h0;
  assign auto_out_0_aw_bits_prot =
    awOut_0_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_prot : 3'h0;
  assign auto_out_0_aw_bits_qos =
    awOut_0_io_enq_bits_muxState_0 ? auto_in_0_aw_bits_qos : 4'h0;
  assign auto_out_0_w_valid = _out_0_w_valid_T_4 & _awOut_0_io_deq_valid;
  assign auto_out_0_w_bits_data =
    (_awOut_0_io_deq_bits[0] ? auto_in_0_w_bits_data : 32'h0)
    | (_awOut_0_io_deq_bits[1] ? auto_in_1_w_bits_data : 32'h0);
  assign auto_out_0_w_bits_strb =
    (_awOut_0_io_deq_bits[0] ? auto_in_0_w_bits_strb : 4'h0)
    | (_awOut_0_io_deq_bits[1] ? auto_in_1_w_bits_strb : 4'h0);
  assign auto_out_0_w_bits_last =
    _awOut_0_io_deq_bits[0] & auto_in_0_w_bits_last | _awOut_0_io_deq_bits[1]
    & auto_in_1_w_bits_last;
  assign auto_out_0_b_ready =
    requestBOI_0_0 & auto_in_0_b_ready & allowed_5_0 | ~(auto_out_0_b_bits_id[5])
    & auto_in_1_b_ready & allowed_7_0;
  assign auto_out_0_ar_valid = out_0_ar_valid;
  assign auto_out_0_ar_bits_id = muxState_0 ? in_0_ar_bits_id : 6'h0;
  assign auto_out_0_ar_bits_addr = muxState_0 ? auto_in_0_ar_bits_addr : 32'h0;
  assign auto_out_0_ar_bits_len = muxState_0 ? auto_in_0_ar_bits_len : 8'h0;
  assign auto_out_0_ar_bits_size = muxState_0 ? auto_in_0_ar_bits_size : 3'h0;
  assign auto_out_0_ar_bits_burst = muxState_0 ? auto_in_0_ar_bits_burst : 2'h0;
  assign auto_out_0_ar_bits_lock = muxState_0 & auto_in_0_ar_bits_lock;
  assign auto_out_0_ar_bits_cache = muxState_0 ? auto_in_0_ar_bits_cache : 4'h0;
  assign auto_out_0_ar_bits_prot = muxState_0 ? auto_in_0_ar_bits_prot : 3'h0;
  assign auto_out_0_ar_bits_qos = muxState_0 ? auto_in_0_ar_bits_qos : 4'h0;
  assign auto_out_0_r_ready = requestROI_0_0 & auto_in_0_r_ready & allowed_4_0;
endmodule

