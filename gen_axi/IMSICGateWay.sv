// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module IMSICGateWay(
  input         clock,
  input         reset,
  input         msiio_msi_vld_req,
  output        msiio_msi_vld_ack,
  input  [10:0] io_seteipnum,
  output [7:0]  msi_data_o,
  output [5:0]  msi_valid_o
);

  reg        msi_vld_ack_cpu;
  reg  [7:0] msi_data_catch;
  reg  [5:0] msi_intf_valids;
  wire       msi_vld_ris_cpu = msiio_msi_vld_req & ~msi_vld_ack_cpu;
  wire [7:0] _msi_intf_valids_T_1 = 8'h1 << io_seteipnum[10:8];
  always @(posedge clock) begin
    msi_vld_ack_cpu <= msiio_msi_vld_req;
    if (reset) begin
      msi_data_catch <= 8'h0;
      msi_intf_valids <= 6'h0;
    end
    else begin
      if (msi_vld_ris_cpu)
        msi_data_catch <= io_seteipnum[7:0];
      msi_intf_valids <= msi_vld_ris_cpu ? _msi_intf_valids_T_1[5:0] : 6'h0;
    end
  end // always @(posedge)
  assign msiio_msi_vld_ack = msi_vld_ack_cpu;
  assign msi_data_o = msi_data_catch;
  assign msi_valid_o = msi_intf_valids;
endmodule

