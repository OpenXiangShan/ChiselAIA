// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module TLMonitor_20(
  input        clock,
  input        reset,
  input        io_in_a_ready,
  input        io_in_a_valid,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_size,
  input [3:0]  io_in_d_bits_source
);

  wire [31:0]  _plusarg_reader_1_out;
  wire [31:0]  _plusarg_reader_out;
  wire         a_first_done = io_in_a_ready & io_in_a_valid;
  reg          a_first_counter;
  reg  [31:0]  address;
  reg          d_first_counter;
  reg  [2:0]   opcode_1;
  reg  [1:0]   size_1;
  reg  [3:0]   source_1;
  reg  [15:0]  inflight;
  reg  [63:0]  inflight_opcodes;
  reg  [63:0]  inflight_sizes;
  reg          a_first_counter_1;
  reg          d_first_counter_1;
  wire         _GEN = a_first_done & ~a_first_counter_1;
  wire         d_release_ack = io_in_d_bits_opcode == 3'h6;
  wire         _GEN_0 = io_in_d_valid & ~d_first_counter_1;
  wire         _GEN_1 = _GEN_0 & ~d_release_ack;
  wire [15:0]  _GEN_2 = {12'h0, io_in_d_bits_source};
  reg  [31:0]  watchdog;
  reg  [15:0]  inflight_1;
  reg  [63:0]  inflight_sizes_1;
  reg          d_first_counter_2;
  wire         _GEN_3 = io_in_d_valid & ~d_first_counter_2 & d_release_ack;
  reg  [31:0]  watchdog_1;
  `ifndef SYNTHESIS
    wire [7:0][2:0] _GEN_4 = '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
    wire [7:0][2:0] _GEN_5 = '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
    wire            mask_sub_0_2 =
      ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);
    wire            mask_sub_1_2 = ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];
    wire            mask_sub_2_2 = io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);
    wire            mask_sub_3_2 = io_in_a_bits_address[2] & io_in_a_bits_address[1];
    wire            _GEN_6 = io_in_a_valid & ~reset;
    wire            _GEN_7 = io_in_d_bits_size != 2'h3;
    wire            _GEN_8 = io_in_d_valid & io_in_d_bits_opcode == 3'h4 & ~reset;
    wire            _GEN_9 = io_in_d_valid & io_in_d_bits_opcode == 3'h5 & ~reset;
    wire            _GEN_10 = io_in_d_valid & d_first_counter & ~reset;
    wire [63:0]     _GEN_11 = {58'h0, io_in_d_bits_source, 2'h0};
    wire [63:0]     _a_opcode_lookup_T_1 = inflight_opcodes >> _GEN_11;
    wire            _same_cycle_resp_T_1 = io_in_a_valid & ~a_first_counter_1;
    wire            same_cycle_resp = _same_cycle_resp_T_1 & ~(|io_in_d_bits_source);
    wire            _GEN_12 = _GEN_1 & same_cycle_resp & ~reset;
    wire            _GEN_13 = _GEN_1 & ~same_cycle_resp & ~reset;
    wire [3:0]      _GEN_14 = {2'h0, io_in_d_bits_size};
    wire            _GEN_15 = _GEN_3 & ~reset;
    wire [15:0]     _GEN_16 = inflight >> _GEN_2;
    wire [63:0]     _a_size_lookup_T_1 = inflight_sizes >> _GEN_11;
    wire [15:0]     _GEN_17 = inflight_1 >> _GEN_2;
    wire [63:0]     _c_size_lookup_T_1 = inflight_sizes_1 >> _GEN_11;
    always @(posedge clock) begin
      if (_GEN_6
          & ~({io_in_a_bits_address[31],
               io_in_a_bits_address[30:17] ^ 14'h3080,
               io_in_a_bits_address[15:13]} == 18'h0
              | io_in_a_bits_address[31:17] == 15'h4148)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:42 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6 & (|(io_in_a_bits_address[1:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:42 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_6
          & io_in_a_bits_mask != {io_in_a_bits_address[2] | mask_sub_3_2
                                    & io_in_a_bits_address[0],
                                  io_in_a_bits_address[2] | mask_sub_3_2
                                    & ~(io_in_a_bits_address[0]),
                                  io_in_a_bits_address[2] | mask_sub_2_2
                                    & io_in_a_bits_address[0],
                                  io_in_a_bits_address[2] | mask_sub_2_2
                                    & ~(io_in_a_bits_address[0]),
                                  ~(io_in_a_bits_address[2]) | mask_sub_1_2
                                    & io_in_a_bits_address[0],
                                  ~(io_in_a_bits_address[2]) | mask_sub_1_2
                                    & ~(io_in_a_bits_address[0]),
                                  ~(io_in_a_bits_address[2]) | mask_sub_0_2
                                    & io_in_a_bits_address[0],
                                  ~(io_in_a_bits_address[2]) | mask_sub_0_2
                                    & ~(io_in_a_bits_address[0])}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:42 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel has invalid opcode (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_d_valid & io_in_d_bits_opcode == 3'h6 & ~reset & _GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant carries invalid sink ID (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_8 & _GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_9 & _GEN_7) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_in_a_valid & a_first_counter & ~reset
          & io_in_a_bits_address != address) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:42 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & io_in_d_bits_opcode != opcode_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & io_in_d_bits_size != size_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_10 & io_in_d_bits_source != source_1) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN & ~reset & inflight[0]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' channel re-used a source ID (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:42 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_1 & ~reset & ~(_GEN_16[0] | same_cycle_resp)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & (|io_in_d_bits_opcode)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & io_in_d_bits_size != 2'h2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13
          & ~(io_in_d_bits_opcode == _GEN_5[_a_opcode_lookup_T_1[3:1]]
              | io_in_d_bits_opcode == _GEN_4[_a_opcode_lookup_T_1[3:1]])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_13 & _GEN_14 != {1'h0, _a_size_lookup_T_1[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_0 & ~a_first_counter_1 & io_in_a_valid & ~(|io_in_d_bits_source)
          & ~d_release_ack & ~reset & ~io_in_a_ready) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~({15'h0, _same_cycle_resp_T_1} != (_GEN_1 ? 16'h1 << _GEN_2 : 16'h0)
              | ~_same_cycle_resp_T_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight == 16'h0 | _plusarg_reader_out == 32'h0
              | watchdog < _plusarg_reader_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:42 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & ~(_GEN_17[0])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_15 & _GEN_14 != {1'h0, _c_size_lookup_T_1[3:1]}) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: 'D' channel contains improper response size (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:49 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(inflight_1 == 16'h0 | _plusarg_reader_1_out == 32'h0
              | watchdog_1 < _plusarg_reader_1_out)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: TileLink timeout expired (connected at src/main/scala/APLIC.scala:346:13)\n    at Monitor.scala:42 assert(cond, message)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire [142:0] _GEN_18 = {137'h0, io_in_d_bits_source, 2'h0};
  wire [142:0] _d_opcodes_clr_T_5 = 143'hF << _GEN_18;
  wire [142:0] _d_sizes_clr_T_5 = 143'hF << _GEN_18;
  wire [142:0] _d_sizes_clr_T_11 = 143'hF << _GEN_18;
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 1'h0;
      d_first_counter <= 1'h0;
      inflight <= 16'h0;
      inflight_opcodes <= 64'h0;
      inflight_sizes <= 64'h0;
      a_first_counter_1 <= 1'h0;
      d_first_counter_1 <= 1'h0;
      watchdog <= 32'h0;
      inflight_1 <= 16'h0;
      inflight_sizes_1 <= 64'h0;
      d_first_counter_2 <= 1'h0;
      watchdog_1 <= 32'h0;
    end
    else begin
      a_first_counter <= (~a_first_done | 1'(a_first_counter - 1'h1)) & a_first_counter;
      d_first_counter <= (~io_in_d_valid | 1'(d_first_counter - 1'h1)) & d_first_counter;
      inflight <= (inflight | {15'h0, _GEN}) & ~(_GEN_1 ? 16'h1 << _GEN_2 : 16'h0);
      inflight_opcodes <=
        (inflight_opcodes | (_GEN ? {63'h0, _GEN} : 64'h0))
        & ~(_GEN_1 ? _d_opcodes_clr_T_5[63:0] : 64'h0);
      inflight_sizes <=
        (inflight_sizes | (_GEN ? {61'h0, _GEN ? 3'h5 : 3'h0} : 64'h0))
        & ~(_GEN_1 ? _d_sizes_clr_T_5[63:0] : 64'h0);
      a_first_counter_1 <=
        (~a_first_done | 1'(a_first_counter_1 - 1'h1)) & a_first_counter_1;
      d_first_counter_1 <=
        (~io_in_d_valid | 1'(d_first_counter_1 - 1'h1)) & d_first_counter_1;
      if (a_first_done | io_in_d_valid)
        watchdog <= 32'h0;
      else
        watchdog <= 32'(watchdog + 32'h1);
      inflight_1 <= inflight_1 & ~(_GEN_3 ? 16'h1 << _GEN_2 : 16'h0);
      inflight_sizes_1 <= inflight_sizes_1 & ~(_GEN_3 ? _d_sizes_clr_T_11[63:0] : 64'h0);
      d_first_counter_2 <=
        (~io_in_d_valid | 1'(d_first_counter_2 - 1'h1)) & d_first_counter_2;
      if (io_in_d_valid)
        watchdog_1 <= 32'h0;
      else
        watchdog_1 <= 32'(watchdog_1 + 32'h1);
    end
    if (a_first_done & ~a_first_counter)
      address <= io_in_a_bits_address;
    if (io_in_d_valid & ~d_first_counter) begin
      opcode_1 <= io_in_d_bits_opcode;
      size_1 <= io_in_d_bits_size;
      source_1 <= io_in_d_bits_source;
    end
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("tilelink_timeout=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
endmodule

