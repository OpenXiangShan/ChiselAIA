// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module RegGen(
  input         clock,
  input         reset,
  output        regmapIOs_0_1_ready,
  input         regmapIOs_0_1_valid,
  input         regmapIOs_0_1_bits_read,
  input  [8:0]  regmapIOs_0_1_bits_index,
  input  [63:0] regmapIOs_0_1_bits_data,
  input  [7:0]  regmapIOs_0_1_bits_mask,
  input         regmapIOs_0_2_ready,
  output        regmapIOs_0_2_valid,
  output        regmapIOs_0_2_bits_read,
  output        regmapIOs_1_1_ready,
  input         regmapIOs_1_1_valid,
  input         regmapIOs_1_1_bits_read,
  input  [11:0] regmapIOs_1_1_bits_index,
  input  [63:0] regmapIOs_1_1_bits_data,
  input  [7:0]  regmapIOs_1_1_bits_mask,
  input         regmapIOs_1_2_ready,
  output        regmapIOs_1_2_valid,
  output        regmapIOs_1_2_bits_read,
  output [10:0] io_seteipnum,
  output        io_valid
);

  wire        _regmapIOs_1_2_wofireMux_T_2;
  wire        regmapIOs_1_2_backSel_4;
  wire        regmapIOs_1_2_backSel_3;
  wire        regmapIOs_1_2_backSel_2;
  wire        regmapIOs_1_2_backSel_1;
  wire        regmapIOs_1_2_backSel_0;
  wire        _regmapIOs_0_2_wofireMux_T_1;
  wire        _regmapIOs_1_2_back_q_io_deq_valid;
  wire        _regmapIOs_1_2_back_q_io_deq_bits_read;
  wire [11:0] _regmapIOs_1_2_back_q_io_deq_bits_index;
  wire [63:0] _regmapIOs_1_2_back_q_io_deq_bits_data;
  wire [7:0]  _regmapIOs_1_2_back_q_io_deq_bits_mask;
  wire        _regmapIOs_0_2_back_q_io_deq_valid;
  wire        _regmapIOs_0_2_back_q_io_deq_bits_read;
  wire [8:0]  _regmapIOs_0_2_back_q_io_deq_bits_index;
  wire [63:0] _regmapIOs_0_2_back_q_io_deq_bits_data;
  wire [7:0]  _regmapIOs_0_2_back_q_io_deq_bits_mask;
  reg  [10:0] outseteipnum;
  reg         outvalids;
  wire        seteipnum_valid =
    _regmapIOs_0_2_back_q_io_deq_valid & regmapIOs_0_2_ready
    & _regmapIOs_0_2_wofireMux_T_1 & _regmapIOs_0_2_back_q_io_deq_bits_index == 9'h0
    & (&{{8{_regmapIOs_0_2_back_q_io_deq_bits_mask[3]}},
         {8{_regmapIOs_0_2_back_q_io_deq_bits_mask[2]}},
         {8{_regmapIOs_0_2_back_q_io_deq_bits_mask[1]}},
         {8{_regmapIOs_0_2_back_q_io_deq_bits_mask[0]}}});
  wire [7:0]  seteipnum_bits =
    seteipnum_valid ? _regmapIOs_0_2_back_q_io_deq_bits_data[7:0] : 8'h0;
  assign _regmapIOs_0_2_wofireMux_T_1 = ~_regmapIOs_0_2_back_q_io_deq_bits_read;
  wire        _regmapIOs_1_2_T_9 = _regmapIOs_1_2_back_q_io_deq_bits_index[8:0] == 9'h0;
  wire [31:0] _regmapIOs_1_2_womask_T_4 =
    {{8{_regmapIOs_1_2_back_q_io_deq_bits_mask[3]}},
     {8{_regmapIOs_1_2_back_q_io_deq_bits_mask[2]}},
     {8{_regmapIOs_1_2_back_q_io_deq_bits_mask[1]}},
     {8{_regmapIOs_1_2_back_q_io_deq_bits_mask[0]}}};
  wire        seteipnum_2_valid =
    _regmapIOs_1_2_wofireMux_T_2 & regmapIOs_1_2_backSel_1 & _regmapIOs_1_2_T_9
    & (&_regmapIOs_1_2_womask_T_4);
  wire [7:0]  seteipnum_2_bits =
    seteipnum_2_valid ? _regmapIOs_1_2_back_q_io_deq_bits_data[7:0] : 8'h0;
  wire        seteipnum_5_valid =
    _regmapIOs_1_2_wofireMux_T_2 & regmapIOs_1_2_backSel_4 & _regmapIOs_1_2_T_9
    & (&_regmapIOs_1_2_womask_T_4);
  wire [7:0]  seteipnum_5_bits =
    seteipnum_5_valid ? _regmapIOs_1_2_back_q_io_deq_bits_data[7:0] : 8'h0;
  wire        seteipnum_4_valid =
    _regmapIOs_1_2_wofireMux_T_2 & regmapIOs_1_2_backSel_3 & _regmapIOs_1_2_T_9
    & (&_regmapIOs_1_2_womask_T_4);
  wire [7:0]  seteipnum_4_bits =
    seteipnum_4_valid ? _regmapIOs_1_2_back_q_io_deq_bits_data[7:0] : 8'h0;
  wire        seteipnum_3_valid =
    _regmapIOs_1_2_wofireMux_T_2 & regmapIOs_1_2_backSel_2 & _regmapIOs_1_2_T_9
    & (&_regmapIOs_1_2_womask_T_4);
  wire [7:0]  seteipnum_3_bits =
    seteipnum_3_valid ? _regmapIOs_1_2_back_q_io_deq_bits_data[7:0] : 8'h0;
  wire        seteipnum_1_valid =
    _regmapIOs_1_2_wofireMux_T_2 & regmapIOs_1_2_backSel_0 & _regmapIOs_1_2_T_9
    & (&_regmapIOs_1_2_womask_T_4);
  wire [7:0]  seteipnum_1_bits =
    seteipnum_1_valid ? _regmapIOs_1_2_back_q_io_deq_bits_data[7:0] : 8'h0;
  assign regmapIOs_1_2_backSel_0 = _regmapIOs_1_2_back_q_io_deq_bits_index[11:9] == 3'h0;
  assign regmapIOs_1_2_backSel_1 = _regmapIOs_1_2_back_q_io_deq_bits_index[11:9] == 3'h1;
  assign regmapIOs_1_2_backSel_2 = _regmapIOs_1_2_back_q_io_deq_bits_index[11:9] == 3'h2;
  assign regmapIOs_1_2_backSel_3 = _regmapIOs_1_2_back_q_io_deq_bits_index[11:9] == 3'h3;
  assign regmapIOs_1_2_backSel_4 = _regmapIOs_1_2_back_q_io_deq_bits_index[11:9] == 3'h4;
  assign _regmapIOs_1_2_wofireMux_T_2 =
    _regmapIOs_1_2_back_q_io_deq_valid & regmapIOs_1_2_ready
    & ~_regmapIOs_1_2_back_q_io_deq_bits_read;
  always @(posedge clock) begin
    if (reset) begin
      outseteipnum <= 11'h0;
      outvalids <= 1'h0;
    end
    else begin
      outseteipnum <= 11'h500;
      outvalids <= seteipnum_5_valid;
    end
  end // always @(posedge)
  Queue1_RegMapperInput regmapIOs_0_2_back_q (
    .clock             (clock),
    .reset             (reset),
    .io_enq_ready      (regmapIOs_0_1_ready),
    .io_enq_valid      (regmapIOs_0_1_valid),
    .io_enq_bits_read  (regmapIOs_0_1_bits_read),
    .io_enq_bits_index (regmapIOs_0_1_bits_index),
    .io_enq_bits_data  (regmapIOs_0_1_bits_data),
    .io_enq_bits_mask  (regmapIOs_0_1_bits_mask),
    .io_deq_ready      (regmapIOs_0_2_ready),
    .io_deq_valid      (_regmapIOs_0_2_back_q_io_deq_valid),
    .io_deq_bits_read  (_regmapIOs_0_2_back_q_io_deq_bits_read),
    .io_deq_bits_index (_regmapIOs_0_2_back_q_io_deq_bits_index),
    .io_deq_bits_data  (_regmapIOs_0_2_back_q_io_deq_bits_data),
    .io_deq_bits_mask  (_regmapIOs_0_2_back_q_io_deq_bits_mask)
  );
  Queue1_RegMapperInput_1 regmapIOs_1_2_back_q (
    .clock             (clock),
    .reset             (reset),
    .io_enq_ready      (regmapIOs_1_1_ready),
    .io_enq_valid      (regmapIOs_1_1_valid),
    .io_enq_bits_read  (regmapIOs_1_1_bits_read),
    .io_enq_bits_index (regmapIOs_1_1_bits_index),
    .io_enq_bits_data  (regmapIOs_1_1_bits_data),
    .io_enq_bits_mask  (regmapIOs_1_1_bits_mask),
    .io_deq_ready      (regmapIOs_1_2_ready),
    .io_deq_valid      (_regmapIOs_1_2_back_q_io_deq_valid),
    .io_deq_bits_read  (_regmapIOs_1_2_back_q_io_deq_bits_read),
    .io_deq_bits_index (_regmapIOs_1_2_back_q_io_deq_bits_index),
    .io_deq_bits_data  (_regmapIOs_1_2_back_q_io_deq_bits_data),
    .io_deq_bits_mask  (_regmapIOs_1_2_back_q_io_deq_bits_mask)
  );
  assign regmapIOs_0_2_valid = _regmapIOs_0_2_back_q_io_deq_valid;
  assign regmapIOs_0_2_bits_read = _regmapIOs_0_2_back_q_io_deq_bits_read;
  assign regmapIOs_1_2_valid = _regmapIOs_1_2_back_q_io_deq_valid;
  assign regmapIOs_1_2_bits_read = _regmapIOs_1_2_back_q_io_deq_bits_read;
  assign io_seteipnum = outseteipnum;
  assign io_valid = outvalids;
endmodule

