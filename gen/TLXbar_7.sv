// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module TLXbar_7(
  input         clock,
  input         reset,
  output        auto_in_1_a_ready,
  input         auto_in_1_a_valid,
  input  [31:0] auto_in_1_a_bits_address,
  input  [7:0]  auto_in_1_a_bits_mask,
  input  [63:0] auto_in_1_a_bits_data,
  output        auto_in_1_d_valid,
  output        auto_in_0_a_ready,
  input         auto_in_0_a_valid,
  input  [31:0] auto_in_0_a_bits_address,
  input  [7:0]  auto_in_0_a_bits_mask,
  input  [63:0] auto_in_0_a_bits_data,
  output        auto_in_0_d_valid,
  input         auto_out_a_ready,
  output        auto_out_a_valid,
  output [1:0]  auto_out_a_bits_size,
  output [4:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready,
  input         auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_size,
  input  [4:0]  auto_out_d_bits_source
);

  wire       portsDIO_filtered_0_valid = auto_out_d_valid & auto_out_d_bits_source[4];
  wire       portsDIO_filtered_1_valid = auto_out_d_valid & ~(auto_out_d_bits_source[4]);
  reg        beatsLeft;
  wire [1:0] readys_valid = {auto_in_1_a_valid, auto_in_0_a_valid};
  reg  [1:0] readys_mask;
  wire [1:0] _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0] readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & ({_readys_filter_T_1[0], auto_in_1_a_valid} | _readys_filter_T_1));
  wire       winner_0 = readys_readys[0] & auto_in_0_a_valid;
  wire       winner_1 = readys_readys[1] & auto_in_1_a_valid;
  wire       _out_0_a_valid_T = auto_in_0_a_valid | auto_in_1_a_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_out_0_a_valid_T | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg        state_0;
  reg        state_1;
  wire       muxState_0 = beatsLeft ? state_0 : winner_0;
  wire       muxState_1 = beatsLeft ? state_1 : winner_1;
  wire       portsAOI_filtered_0_ready =
    auto_out_a_ready & (beatsLeft ? state_0 : readys_readys[0]);
  wire       portsAOI_filtered_1_0_ready =
    auto_out_a_ready & (beatsLeft ? state_1 : readys_readys[1]);
  wire       out_0_a_valid =
    beatsLeft
      ? state_0 & auto_in_0_a_valid | state_1 & auto_in_1_a_valid
      : _out_0_a_valid_T;
  wire [1:0] _readys_mask_T = readys_readys & readys_valid;
  wire       latch = ~beatsLeft & auto_out_a_ready;
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 1'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
    end
    else begin
      beatsLeft <= ~latch & 1'(beatsLeft - (auto_out_a_ready & out_0_a_valid));
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      if (beatsLeft) begin
      end
      else begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
    end
  end // always @(posedge)
  TLMonitor_20 monitor (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (portsAOI_filtered_0_ready),
    .io_in_a_valid        (auto_in_0_a_valid),
    .io_in_a_bits_address (auto_in_0_a_bits_address),
    .io_in_a_bits_mask    (auto_in_0_a_bits_mask),
    .io_in_d_valid        (portsDIO_filtered_0_valid),
    .io_in_d_bits_opcode  (auto_out_d_bits_opcode),
    .io_in_d_bits_size    (auto_out_d_bits_size),
    .io_in_d_bits_source  (auto_out_d_bits_source[3:0])
  );
  TLMonitor_20 monitor_1 (
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (portsAOI_filtered_1_0_ready),
    .io_in_a_valid        (auto_in_1_a_valid),
    .io_in_a_bits_address (auto_in_1_a_bits_address),
    .io_in_a_bits_mask    (auto_in_1_a_bits_mask),
    .io_in_d_valid        (portsDIO_filtered_1_valid),
    .io_in_d_bits_opcode  (auto_out_d_bits_opcode),
    .io_in_d_bits_size    (auto_out_d_bits_size),
    .io_in_d_bits_source  (auto_out_d_bits_source[3:0])
  );
  assign auto_in_1_a_ready = portsAOI_filtered_1_0_ready;
  assign auto_in_1_d_valid = portsDIO_filtered_1_valid;
  assign auto_in_0_a_ready = portsAOI_filtered_0_ready;
  assign auto_in_0_d_valid = portsDIO_filtered_0_valid;
  assign auto_out_a_valid = out_0_a_valid;
  assign auto_out_a_bits_size = {muxState_0 | muxState_1, 1'h0};
  assign auto_out_a_bits_source = {muxState_0, 4'h0};
  assign auto_out_a_bits_address =
    (muxState_0 ? auto_in_0_a_bits_address : 32'h0)
    | (muxState_1 ? auto_in_1_a_bits_address : 32'h0);
  assign auto_out_a_bits_mask =
    (muxState_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_1 ? auto_in_1_a_bits_mask : 8'h0);
  assign auto_out_a_bits_data =
    (muxState_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_1 ? auto_in_1_a_bits_data : 64'h0);
  assign auto_out_d_ready = 1'h1;
endmodule

